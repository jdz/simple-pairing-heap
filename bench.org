#+title: Simple pairing heap benchmarks
#+options: num:nil toc:2 ^:nil

* [1/1] Tasks                                                      :noexport:
** DONE Benchmark against damn fast priority queue
CLOSED: [2021-12-07 Tue 14:14]

Randomly stumbled upon https://github.com/phoe/damn-fast-priority-queue, which
looks like a good candidate to include in the benchmarks.

* Benchmark code                                                   :noexport:

The following two code blocks must be evaluated before evaluating the
benchmark blocks (using ~C-c C-c~).

#+caption: Setup code
#+begin_src lisp :results silent
  (in-package #:cl-user)

  (eval-when (:load-toplevel :compile-toplevel :execute)
    (unless (find-package '#:alexandria)
      (ql:quickload "alexandria"))
    (unless (find-package '#:simple-pairing-heap)
      (ql:quickload "simple-pairing-heap"))
    (unless (find-package '#:bodge-heap)
      (ql:quickload "bodge-heap"))
    (unless (find-package '#:damn-fast-priority-queue)
      (ql:quickload "damn-fast-priority-queue")))
#+end_src

#+caption: Benchmark code
#+begin_src lisp :results silent
  (in-package #:cl-user)

  (defun benchmark (&key (n 1000)
                         (m 1000)
                         (repeat 50)
                         (warmup 3)
                         (key #'identity)
                         (node-constructor #'identity))
    ;; Damn fast priority queue only supports (UNSIGNED-BYTE 32) keys.
    (assert (< (+ n m) (expt 2 32))
            (n m)
            "Too many items (~D + ~D = ~D)."
            n m (+ n m))
    (let* ((items (alexandria:shuffle
                   (mapcar node-constructor (alexandria:iota (+ n m)))))
           (init-items (subseq items 0 n))
           (more-items (nthcdr n items)))
      (macrolet ((bench ((heap-var item-var description)
                         new add del)
                   `(progn
                      (write-line ,description *trace-output*)
                      ,#+sbcl (sb-ext:gc :full t)
                      (flet ((run ()
                               (let ((,heap-var ,new))
                                 (loop for ,item-var in init-items
                                       do ,add)
                                 (loop for ,item-var in more-items
                                       do ,del ,add))))
                        (loop repeat warmup do (run))
                        (time
                         (loop repeat repeat do (run)))
                        (finish-output *trace-output*)))))
        (format *trace-output*
                "~&Heap of size ~D, with ~D reinserts (×~D), on ~A ~A~2%"
                n m repeat
                (lisp-implementation-type) (lisp-implementation-version))
        (bench (heap item "SIMPLE-PAIRING-HEAP (recursive)")
               (simple-pairing-heap:create :key key :recursive-merge t)
               (simple-pairing-heap:insert item heap)
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "SIMPLE-PAIRING-HEAP (consing)")
               (simple-pairing-heap:create :key key)
               (simple-pairing-heap:insert item heap)
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "BODGE-HEAP (pairing)")
               (bodge-heap:make-pairing-heap :key key)
               (bodge-heap:pairing-heap-push heap item)
               (bodge-heap:pairing-heap-pop heap))
        (bench (heap item "DAMN-FAST-PRIORITY-QUEUE")
               (damn-fast-priority-queue:make-queue)
               (damn-fast-priority-queue:enqueue heap item (funcall key item))
               (damn-fast-priority-queue:dequeue heap))
        t)))
#+end_src

#+caption: Sampling code
#+name: run-benchmark
#+begin_src lisp :var heap-size=1000 reinserts=1000 repeats=50
  (let ((output (with-output-to-string (*trace-output*)
                  (benchmark :n heap-size
                             :m reinserts
                             :repeat repeats
                             :node-constructor (lambda (n) (cons n n))
                             :key #'car))))
    (string-right-trim '(#\space #\return #\newline) output))
#+end_src

* Benchmarks with pairing heap nodes as cons cells
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664
PAIRING-HEAP
(LOOP REPEAT REPEAT DO (RUN))
took 22,901,788 microseconds (22.901789 seconds) to run.
         58,992 microseconds ( 0.058992 seconds, 0.26%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,191,845 microseconds (23.191845 seconds) were spent in user mode
        137,124 microseconds ( 0.137124 seconds) were spent in system mode
 1,350,148,000 bytes of memory allocated.
 65 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP
(LOOP REPEAT REPEAT DO (RUN))
took 4,975,993 microseconds (4.975993 seconds) to run.
       161,004 microseconds (0.161004 seconds, 3.24%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,263,986 microseconds (5.263986 seconds) were spent in user mode
        29,249 microseconds (0.029249 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 129 minor page faults, 0 major page faults, 0 swaps.
#+end_example

Other benchmarks take even longer, so not even trying.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.1.11.65.HEAD.3-69c5739bb

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.763 seconds of real time
  0.786732 seconds of total run time (0.776465 user, 0.010267 system)
  [ Run times consist of 0.035 seconds GC time, and 0.752 seconds non-GC time. ]
  103.15% CPU
  2,888,818,634 processor cycles
  1,347,940,320 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.833 seconds of real time
  0.871658 seconds of total run time (0.871346 user, 0.000312 system)
  [ Run times consist of 0.048 seconds GC time, and 0.824 seconds non-GC time. ]
  104.68% CPU
  3,163,692,850 processor cycles
  1,783,124,880 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.826 seconds of real time
  0.862276 seconds of total run time (0.845106 user, 0.017170 system)
  [ Run times consist of 0.032 seconds GC time, and 0.831 seconds non-GC time. ]
  104.36% CPU
  3,138,480,762 processor cycles
  1,202,405,456 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.333 seconds of real time
  1.333346 seconds of total run time (1.333346 user, 0.000000 system)
  100.00% CPU
  5,058,730,772 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.1.11.65.HEAD.3-69c5739bb

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.950 seconds of real time
  6.888243 seconds of total run time (6.828787 user, 0.059456 system)
  [ Run times consist of 0.314 seconds GC time, and 6.575 seconds non-GC time. ]
  99.11% CPU
  26,353,873,316 processor cycles
  12,202,956,656 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.453 seconds of real time
  7.411644 seconds of total run time (6.962900 user, 0.448744 system)
  [ Run times consist of 0.404 seconds GC time, and 7.008 seconds non-GC time. ]
  99.45% CPU
  28,265,534,756 processor cycles
  16,251,418,928 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.630 seconds of real time
  7.716263 seconds of total run time (7.675851 user, 0.040412 system)
  [ Run times consist of 0.308 seconds GC time, and 7.409 seconds non-GC time. ]
  101.13% CPU
  28,946,136,568 processor cycles
  12,002,405,168 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.313 seconds of real time
  13.309240 seconds of total run time (13.309240 user, 0.000000 system)
  99.97% CPU
  50,496,277,618 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.1.11.65.HEAD.3-69c5739bb

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  7.146 seconds of real time
  7.533827 seconds of total run time (7.301694 user, 0.232133 system)
  [ Run times consist of 0.851 seconds GC time, and 6.683 seconds non-GC time. ]
  105.43% CPU
  27,111,887,398 processor cycles
  8,199,428,736 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.856 seconds of real time
  8.288350 seconds of total run time (8.061859 user, 0.226491 system)
  [ Run times consist of 1.024 seconds GC time, and 7.265 seconds non-GC time. ]
  105.50% CPU
  29,792,807,044 processor cycles
  10,388,721,232 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.853 seconds of real time
  5.961893 seconds of total run time (5.869954 user, 0.091939 system)
  [ Run times consist of 0.463 seconds GC time, and 5.499 seconds non-GC time. ]
  101.86% CPU
  22,203,858,014 processor cycles
  2,520,000,528 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.560 seconds of real time
  4.559151 seconds of total run time (4.556402 user, 0.002749 system)
  [ Run times consist of 0.001 seconds GC time, and 4.559 seconds non-GC time. ]
  99.98% CPU
  17,288,751,662 processor cycles
  78,473,680 bytes consed
#+end_example

* Benchmarks with pairing heap nodes as structs
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 2,662,240 microseconds (2.662240 seconds) to run.
       111,134 microseconds (0.111134 seconds, 4.17%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     2,742,880 microseconds (2.742880 seconds) were spent in user mode
        21,830 microseconds (0.021830 seconds) were spent in system mode
 2,221,867,200 bytes of memory allocated.
 225 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 3,675,276 microseconds (3.675276 seconds) to run.
       130,924 microseconds (0.130924 seconds, 3.56%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,740,154 microseconds (3.740154 seconds) were spent in user mode
        61,855 microseconds (0.061855 seconds) were spent in system mode
 2,656,940,800 bytes of memory allocated.
 225 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,407,180 microseconds (4.407180 seconds) to run.
       168,476 microseconds (0.168476 seconds, 3.82%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     4,643,492 microseconds (4.643492 seconds) were spent in user mode
        50,518 microseconds (0.050518 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 129 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,479,452 microseconds (6.479452 seconds) to run.
           422 microseconds (0.000422 seconds, 0.01%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,477,646 microseconds (6.477646 seconds) were spent in user mode
             0 microseconds (0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 40,212,238 microseconds (40.212240 seconds) to run.
        553,096 microseconds ( 0.553096 seconds, 1.38%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     40,752,379 microseconds (40.752380 seconds) were spent in user mode
        447,789 microseconds ( 0.447789 seconds) were spent in system mode
 20,303,980,800 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 50,635,831 microseconds (50.635834 seconds) to run.
        693,797 microseconds ( 0.693797 seconds, 1.37%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     50,717,437 microseconds (50.717438 seconds) were spent in user mode
        863,483 microseconds ( 0.863483 seconds) were spent in system mode
 24,352,268,000 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 54,233,759 microseconds (54.233760 seconds) to run.
      1,565,222 microseconds ( 1.565222 seconds, 2.89%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     55,613,465 microseconds (55.613464 seconds) were spent in user mode
      1,321,364 microseconds ( 1.321364 seconds) were spent in system mode
 12,002,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 83,651,300 microseconds (83.651300 seconds) to run.
            456 microseconds ( 0.000456 seconds, 0.00%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     79,619,724 microseconds (79.619730 seconds) were spent in user mode
      1,906,599 microseconds ( 1.906599 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 20,108,633 microseconds (20.108631 seconds) to run.
      4,095,141 microseconds ( 4.095141 seconds, 20.37%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     20,261,623 microseconds (20.261623 seconds) were spent in user mode
        362,589 microseconds ( 0.362589 seconds) were spent in system mode
 12,692,726,400 bytes of memory allocated.
 800 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 24,467,893 microseconds (24.467892 seconds) to run.
      4,425,967 microseconds ( 4.425967 seconds, 18.09%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,583,468 microseconds (23.583467 seconds) were spent in user mode
      1,174,325 microseconds ( 1.174325 seconds) were spent in system mode
 14,877,633,600 bytes of memory allocated.
 896 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 34,427,471 microseconds (34.427470 seconds) to run.
      2,520,191 microseconds ( 2.520191 seconds, 7.32%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     33,733,223 microseconds (33.733223 seconds) were spent in user mode
        906,055 microseconds ( 0.906055 seconds) were spent in system mode
 2,520,001,600 bytes of memory allocated.
 128 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 22,279,603 microseconds (22.279604 seconds) to run.
         30,005 microseconds ( 0.030005 seconds, 0.13%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     21,126,583 microseconds (21.126583 seconds) were spent in user mode
        631,544 microseconds ( 0.631544 seconds) were spent in system mode
 78,532,800 bytes of memory allocated.
#+end_example

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  0.993 seconds of real time
  0.998669 seconds of total run time (0.998658 user, 0.000011 system)
  [ Run times consist of 0.021 seconds GC time, and 0.978 seconds non-GC time. ]
  100.60% CPU
  3,766,689,124 processor cycles
  2,226,190,768 bytes consed

BODGE-HEAP
Evaluation took:
  0.806 seconds of real time
  0.809088 seconds of total run time (0.809088 user, 0.000000 system)
  [ Run times consist of 0.010 seconds GC time, and 0.800 seconds non-GC time. ]
  100.37% CPU
  3,062,393,780 processor cycles
  1,202,399,904 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  8.750 seconds of real time
  8.831415 seconds of total run time (8.821180 user, 0.010235 system)
  [ Run times consist of 0.193 seconds GC time, and 8.639 seconds non-GC time. ]
  100.93% CPU
  33,181,606,764 processor cycles
  20,302,848,720 bytes consed

BODGE-HEAP
Evaluation took:
  7.316 seconds of real time
  7.405160 seconds of total run time (7.367972 user, 0.037188 system)
  [ Run times consist of 0.111 seconds GC time, and 7.295 seconds non-GC time. ]
  101.22% CPU
  27,741,303,856 processor cycles
  12,002,376,352 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  8.593 seconds of real time
  8.689080 seconds of total run time (8.530174 user, 0.158906 system)
  [ Run times consist of 0.656 seconds GC time, and 8.034 seconds non-GC time. ]
  101.12% CPU
  32,598,229,320 processor cycles
  12,663,746,272 bytes consed

BODGE-HEAP
Evaluation took:
  5.380 seconds of real time
  5.397033 seconds of total run time (5.387871 user, 0.009162 system)
  [ Run times consist of 0.090 seconds GC time, and 5.308 seconds non-GC time. ]
  100.32% CPU
  20,407,363,668 processor cycles
  2,519,980,288 bytes consed
#+end_example
