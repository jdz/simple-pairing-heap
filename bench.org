#+title: Simple pairing heap benchmarks
#+options: num:nil toc:2 ^:nil

* [1/1] Tasks                                                      :noexport:
** DONE Benchmark against damn fast priority queue
CLOSED: [2021-12-07 Tue 14:14]

Randomly stumbled upon https://github.com/phoe/damn-fast-priority-queue, which
looks like a good candidate to include in the benchmarks.

* Benchmark code                                                   :noexport:

The following two code blocks must be evaluated before evaluating the
benchmark blocks (using ~C-c C-c~).

#+caption: Setup code
#+begin_src lisp :results none
  (in-package #:cl-user)

  (eval-when (:load-toplevel :compile-toplevel :execute)
    (unless (find-package '#:simple-pairing-heap)
      (ql:quickload "simple-pairing-heap"))
    (unless (find-package '#:bodge-heap)
      (ql:quickload "bodge-heap"))
    (unless (find-package '#:damn-fast-priority-queue)
      (ql:quickload "damn-fast-priority-queue"))
    (unless (find-package '#:pairing-elmasri)
      (ql:quickload "minheap")))
#+end_src

#+caption: Benchmark code
#+begin_src lisp :results silent
  (in-package #:cl-user)

  (defun benchmark (&key (n 1000)
                         (m 1000)
                         (scale (expt n 2))
                         (repeat 50)
                         (warmup 10)
                         (key #'identity)
                         (node-constructor #'identity))
    (let ((init-items (loop repeat n
                            collect (funcall node-constructor (random scale))))
          (more-items (loop repeat m
                            collect (funcall node-constructor (random scale)))))
      (macrolet ((bench ((heap-var item-var description)
                         new add del)
                   `(progn
                      (fresh-line *trace-output*)
                      (write-line ,description *trace-output*)
                      ,#+sbcl (sb-ext:gc :full t)
                      (flet ((run ()
                               (let ((,heap-var ,new))
                                 (loop for ,item-var in init-items
                                       do ,add)
                                 (loop for ,item-var in more-items
                                       do ,del ,add))))
                        (loop repeat warmup do (run))
                        (time
                         (loop repeat repeat do (run)))))))
        (bench (heap item "SIMPLE-PAIRING-HEAP")
               (simple-pairing-heap:create :key key)
               (simple-pairing-heap:insert item heap)
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "MINHEAP (pairing)")
               (make-instance 'pairing-heap:pairing-heap)
               (pairing-heap:insert heap (funcall key item) item)
               (pairing-heap:extract-min heap))
        (bench (heap item "MINHEAP (pairing, Elmasri)")
               (make-instance 'pairing-elmasri:pairing-elmasri)
               (pairing-elmasri:insert heap (funcall key item) item)
               (pairing-elmasri:extract-min heap))
        (bench (heap item "BODGE-HEAP (pairing)")
               (bodge-heap:make-pairing-heap :key key)
               (bodge-heap:pairing-heap-push heap item)
               (bodge-heap:pairing-heap-pop heap))
        (bench (heap item "DAMN-FAST-PRIORITY-QUEUE")
               (damn-fast-priority-queue:make-queue)
               (damn-fast-priority-queue:enqueue heap item (funcall key item))
               (damn-fast-priority-queue:dequeue heap))
        t)))
#+end_src

#+caption: Sampling code
#+name: run-benchmark
#+begin_src lisp :var heap-size=1000 reinserts=1000
  (let ((output (with-output-to-string (*trace-output*)
                  (format *trace-output*
                          "~&Heap of size ~D, with ~D reinserts, ~A ~A~%"
                          heap-size reinserts
                          (lisp-implementation-type)
                          (lisp-implementation-version))
                  (benchmark :n heap-size
                             :m reinserts
                             :node-constructor (lambda (n)
                                                 (cons n (format nil "~R" n)))
                             :key #'car))))
    (string-right-trim '(#\space #\return #\newline) output))
#+end_src

* Benchmarks with pairing heap nodes as cons cells
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664
PAIRING-HEAP
(LOOP REPEAT REPEAT DO (RUN))
took 22,901,788 microseconds (22.901789 seconds) to run.
         58,992 microseconds ( 0.058992 seconds, 0.26%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,191,845 microseconds (23.191845 seconds) were spent in user mode
        137,124 microseconds ( 0.137124 seconds) were spent in system mode
 1,350,148,000 bytes of memory allocated.
 65 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP
(LOOP REPEAT REPEAT DO (RUN))
took 4,975,993 microseconds (4.975993 seconds) to run.
       161,004 microseconds (0.161004 seconds, 3.24%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,263,986 microseconds (5.263986 seconds) were spent in user mode
        29,249 microseconds (0.029249 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 129 minor page faults, 0 major page faults, 0 swaps.
#+end_example

Other benchmarks take even longer, so not even trying.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, SBCL 2.1.11.21.HEAD.3-476140422
SIMPLE-PAIRING-HEAP
Evaluation took:
  0.763 seconds of real time
  0.776066 seconds of total run time (0.775672 user, 0.000394 system)
  [ Run times consist of 0.011 seconds GC time, and 0.766 seconds non-GC time. ]
  101.70% CPU
  2,895,176,756 processor cycles
  1,348,038,512 bytes consed

MINHEAP (pairing)
Evaluation took:
  1.400 seconds of real time
  1.407986 seconds of total run time (1.404699 user, 0.003287 system)
  [ Run times consist of 0.008 seconds GC time, and 1.400 seconds non-GC time. ]
  100.57% CPU
  5,313,421,706 processor cycles
  1,202,396,576 bytes consed

MINHEAP (pairing, Elmasri)
Evaluation took:
  1.936 seconds of real time
  1.948801 seconds of total run time (1.948725 user, 0.000076 system)
  [ Run times consist of 0.015 seconds GC time, and 1.934 seconds non-GC time. ]
  100.67% CPU
  7,344,917,362 processor cycles
  1,603,193,808 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.820 seconds of real time
  0.827681 seconds of total run time (0.827611 user, 0.000070 system)
  [ Run times consist of 0.008 seconds GC time, and 0.820 seconds non-GC time. ]
  100.98% CPU
  3,108,794,858 processor cycles
  1,202,401,104 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.333 seconds of real time
  1.334802 seconds of total run time (1.334802 user, 0.000000 system)
  100.15% CPU
  5,064,322,396 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts, SBCL 2.1.11.21.HEAD.3-476140422
SIMPLE-PAIRING-HEAP
Evaluation took:
  6.586 seconds of real time
  6.634327 seconds of total run time (6.633845 user, 0.000482 system)
  [ Run times consist of 0.108 seconds GC time, and 6.527 seconds non-GC time. ]
  100.73% CPU
  24,982,897,308 processor cycles
  12,204,579,856 bytes consed

MINHEAP (pairing)
Evaluation took:
  13.543 seconds of real time
  13.584072 seconds of total run time (13.578541 user, 0.005531 system)
  [ Run times consist of 0.107 seconds GC time, and 13.478 seconds non-GC time. ]
  100.30% CPU
  51,377,003,580 processor cycles
  12,002,387,424 bytes consed

MINHEAP (pairing, Elmasri)
Evaluation took:
  18.553 seconds of real time
  18.617228 seconds of total run time (18.594634 user, 0.022594 system)
  [ Run times consist of 0.155 seconds GC time, and 18.463 seconds non-GC time. ]
  100.34% CPU
  70,359,583,088 processor cycles
  16,003,194,896 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.283 seconds of real time
  7.350634 seconds of total run time (7.346748 user, 0.003886 system)
  [ Run times consist of 0.103 seconds GC time, and 7.248 seconds non-GC time. ]
  100.93% CPU
  27,615,968,570 processor cycles
  12,002,400,448 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.026 seconds of real time
  13.023744 seconds of total run time (13.023744 user, 0.000000 system)
  99.98% CPU
  49,411,985,770 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts, SBCL 2.1.11.21.HEAD.3-476140422
SIMPLE-PAIRING-HEAP
Evaluation took:
  6.730 seconds of real time
  6.766603 seconds of total run time (6.719722 user, 0.046881 system)
  [ Run times consist of 0.286 seconds GC time, and 6.481 seconds non-GC time. ]
  100.55% CPU
  25,531,854,694 processor cycles
  8,171,258,784 bytes consed

MINHEAP (pairing)
Evaluation took:
  5.216 seconds of real time
  5.220717 seconds of total run time (5.214318 user, 0.006399 system)
  [ Run times consist of 0.084 seconds GC time, and 5.137 seconds non-GC time. ]
  100.10% CPU
  19,787,099,776 processor cycles
  2,520,009,072 bytes consed

MINHEAP (pairing, Elmasri)
Evaluation took:
  6.373 seconds of real time
  6.385038 seconds of total run time (6.318353 user, 0.066685 system)
  [ Run times consist of 0.141 seconds GC time, and 6.245 seconds non-GC time. ]
  100.19% CPU
  24,173,332,236 processor cycles
  3,359,998,736 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.346 seconds of real time
  5.374138 seconds of total run time (5.370708 user, 0.003430 system)
  [ Run times consist of 0.089 seconds GC time, and 5.286 seconds non-GC time. ]
  100.52% CPU
  20,278,433,354 processor cycles
  2,519,998,576 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.486 seconds of real time
  4.482763 seconds of total run time (4.476382 user, 0.006381 system)
  99.93% CPU
  17,007,885,720 processor cycles
  78,506,448 bytes consed
#+end_example

* Benchmarks with pairing heap nodes as structs
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664
SIMPLE-PAIRING-HEAP
(LOOP REPEAT REPEAT DO (RUN))
took 3,142,615 microseconds (3.142615 seconds) to run.
        85,234 microseconds (0.085234 seconds, 2.71%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,205,637 microseconds (3.205637 seconds) were spent in user mode
        50,635 microseconds (0.050635 seconds) were spent in system mode
 2,225,620,800 bytes of memory allocated.
 226 minor page faults, 0 major page faults, 0 swaps.
MINHEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 12,416,286 microseconds (12.416286 seconds) to run.
        244,606 microseconds ( 0.244606 seconds, 1.97%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     12,972,504 microseconds (12.972504 seconds) were spent in user mode
         64,660 microseconds ( 0.064660 seconds) were spent in system mode
 1,603,203,200 bytes of memory allocated.
 387 minor page faults, 0 major page faults, 0 swaps.
MINHEAP (pairing, Elmasri)
(LOOP REPEAT REPEAT DO (RUN))
took 22,119,350 microseconds (22.119350 seconds) to run.
        338,923 microseconds ( 0.338923 seconds, 1.53%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     22,630,393 microseconds (22.630392 seconds) were spent in user mode
         46,103 microseconds ( 0.046103 seconds) were spent in system mode
 1,603,204,800 bytes of memory allocated.
 355 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 5,112,480 microseconds (5.112480 seconds) to run.
       187,806 microseconds (0.187806 seconds, 3.67%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,571,235 microseconds (5.571235 seconds) were spent in user mode
        54,743 microseconds (0.054743 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,701,943 microseconds (6.701943 seconds) to run.
           373 microseconds (0.000373 seconds, 0.01%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,701,109 microseconds (6.701109 seconds) were spent in user mode
             0 microseconds (0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

The slower heap implementations take too long to run.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  0.993 seconds of real time
  0.998669 seconds of total run time (0.998658 user, 0.000011 system)
  [ Run times consist of 0.021 seconds GC time, and 0.978 seconds non-GC time. ]
  100.60% CPU
  3,766,689,124 processor cycles
  2,226,190,768 bytes consed

BODGE-HEAP
Evaluation took:
  0.806 seconds of real time
  0.809088 seconds of total run time (0.809088 user, 0.000000 system)
  [ Run times consist of 0.010 seconds GC time, and 0.800 seconds non-GC time. ]
  100.37% CPU
  3,062,393,780 processor cycles
  1,202,399,904 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  8.750 seconds of real time
  8.831415 seconds of total run time (8.821180 user, 0.010235 system)
  [ Run times consist of 0.193 seconds GC time, and 8.639 seconds non-GC time. ]
  100.93% CPU
  33,181,606,764 processor cycles
  20,302,848,720 bytes consed

BODGE-HEAP
Evaluation took:
  7.316 seconds of real time
  7.405160 seconds of total run time (7.367972 user, 0.037188 system)
  [ Run times consist of 0.111 seconds GC time, and 7.295 seconds non-GC time. ]
  101.22% CPU
  27,741,303,856 processor cycles
  12,002,376,352 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  8.593 seconds of real time
  8.689080 seconds of total run time (8.530174 user, 0.158906 system)
  [ Run times consist of 0.656 seconds GC time, and 8.034 seconds non-GC time. ]
  101.12% CPU
  32,598,229,320 processor cycles
  12,663,746,272 bytes consed

BODGE-HEAP
Evaluation took:
  5.380 seconds of real time
  5.397033 seconds of total run time (5.387871 user, 0.009162 system)
  [ Run times consist of 0.090 seconds GC time, and 5.308 seconds non-GC time. ]
  100.32% CPU
  20,407,363,668 processor cycles
  2,519,980,288 bytes consed
#+end_example
