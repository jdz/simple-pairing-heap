#+title: Simple pairing heap benchmarks
#+options: num:nil toc:2 ^:nil

* [1/1] Tasks                                                      :noexport:
** DONE Benchmark against damn fast priority queue
CLOSED: [2021-12-07 Tue 14:14]

Randomly stumbled upon https://github.com/phoe/damn-fast-priority-queue, which
looks like a good candidate to include in the benchmarks.

* Benchmark code                                                   :noexport:

The following two code blocks must be evaluated before evaluating the
benchmark blocks (using ~C-c C-c~).

#+caption: Setup code
#+begin_src lisp :results silent
  (eval-when (:load-toplevel :compile-toplevel :execute)
    (unless (find-package '#:alexandria)
      (ql:quickload "alexandria"))
    (unless (find-package '#:simple-pairing-heap)
      (ql:quickload "simple-pairing-heap"))
    (unless (find-package '#:bodge-heap)
      (ql:quickload "bodge-heap"))
    (unless (find-package '#:damn-fast-priority-queue)
      (ql:quickload "damn-fast-priority-queue")))
#+end_src

#+caption: Benchmark code
#+begin_src lisp :results silent
  (defun benchmark (&key (n 1000)
                         (m 1000)
                         (repeat 50)
                         (warmup 3)
                         (key #'identity)
                         (node-constructor #'identity))
    ;; Damn fast priority queue only supports (UNSIGNED-BYTE 32) keys.
    (assert (< (+ n m) (expt 2 32))
            (n m)
            "Too many items (~D + ~D = ~D)."
            n m (+ n m))
    (let* ((items (alexandria:shuffle
                   (mapcar node-constructor (alexandria:iota (+ n m)))))
           (init-items (subseq items 0 n))
           (more-items (nthcdr n items)))
      (macrolet ((bench ((heap-var item-var description)
                         new add del)
                   `(progn
                      (write-line ,description *trace-output*)
                      ,#+sbcl (sb-ext:gc :full t)
                      (flet ((run ()
                               (let ((,heap-var ,new))
                                 (loop for ,item-var in init-items
                                       do ,add)
                                 (loop for ,item-var in more-items
                                       do ,del ,add))))
                        (loop repeat warmup do (run))
                        (time
                         (loop repeat repeat do (run)))
                        (finish-output *trace-output*)))))
        (format *trace-output*
                "~&Heap of size ~D, with ~D reinserts (×~D), on ~A ~A~2%"
                n m repeat
                (lisp-implementation-type) (lisp-implementation-version))
        (bench (heap item "SIMPLE-PAIRING-HEAP (recursive)")
               (simple-pairing-heap:create :recursive-merge t)
               (simple-pairing-heap:insert item heap (funcall key item))
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "SIMPLE-PAIRING-HEAP (consing)")
               (simple-pairing-heap:create)
               (simple-pairing-heap:insert item heap (funcall key item))
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "BODGE-HEAP (pairing)")
               (bodge-heap:make-pairing-heap :key key)
               (bodge-heap:pairing-heap-push heap item)
               (bodge-heap:pairing-heap-pop heap))
        (bench (heap item "DAMN-FAST-PRIORITY-QUEUE")
               (damn-fast-priority-queue:make-queue)
               (damn-fast-priority-queue:enqueue heap item (funcall key item))
               (damn-fast-priority-queue:dequeue heap))
        t)))
#+end_src

#+caption: Sampling code
#+name: run-benchmark
#+begin_src lisp :var heap-size=1000 reinserts=1000 repeats=50
  (let ((output (with-output-to-string (*trace-output*)
                  (benchmark :n heap-size
                             :m reinserts
                             :repeat repeats
                             :node-constructor (lambda (n) (cons n n))
                             :key #'car))))
    (string-right-trim '(#\space #\return #\newline) output))
#+end_src

* Benchmarks with pairing heap nodes as cons cells
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 22,587,142 microseconds (22.587143 seconds) to run.
        448,303 microseconds ( 0.448303 seconds, 1.98%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,050,000 microseconds (23.050000 seconds) were spent in user mode
         65,289 microseconds ( 0.065289 seconds) were spent in system mode
 1,347,645,600 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 22,957,732 microseconds (22.957731 seconds) to run.
        589,163 microseconds ( 0.589163 seconds, 2.57%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,598,699 microseconds (23.598700 seconds) were spent in user mode
         62,432 microseconds ( 0.062432 seconds) were spent in system mode
 1,782,719,200 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,896,226 microseconds (4.896226 seconds) to run.
       601,396 microseconds (0.601396 seconds, 12.28%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,217,958 microseconds (5.217958 seconds) were spent in user mode
        32,170 microseconds (0.032170 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,664,833 microseconds (6.664833 seconds) to run.
         1,524 microseconds (0.001524 seconds, 0.02%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,585,510 microseconds (6.585510 seconds) were spent in user mode
         2,932 microseconds (0.002932 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

Other benchmarks take even longer, so not even trying.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.3.8.11.HEAD.17-ea2e53fe4

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  1.333 seconds of real time
  1.394772 seconds of total run time (1.375374 user, 0.019398 system)
  [ Real times consist of 0.033 seconds GC time, and 1.300 seconds non-GC time. ]
  [ Run times consist of 0.105 seconds GC time, and 1.290 seconds non-GC time. ]
  104.65% CPU
  5,049,073,642 processor cycles
  3,122,328,960 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  1.613 seconds of real time
  1.680696 seconds of total run time (1.664216 user, 0.016480 system)
  [ Real times consist of 0.040 seconds GC time, and 1.573 seconds non-GC time. ]
  [ Run times consist of 0.112 seconds GC time, and 1.569 seconds non-GC time. ]
  104.22% CPU
  6,115,656,692 processor cycles
  3,561,084,160 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  1.113 seconds of real time
  1.145001 seconds of total run time (1.145001 user, 0.000000 system)
  [ Real times consist of 0.016 seconds GC time, and 1.097 seconds non-GC time. ]
  [ Run times consist of 0.049 seconds GC time, and 1.097 seconds non-GC time. ]
  102.88% CPU
  4,216,313,712 processor cycles
  1,209,603,584 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.410 seconds of real time
  1.411706 seconds of total run time (1.411706 user, 0.000000 system)
  100.14% CPU
  5,356,407,914 processor cycles
  1,583,616 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.3.8.11.HEAD.17-ea2e53fe4

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  28.877 seconds of real time
  29.782404 seconds of total run time (29.753128 user, 0.029276 system)
  [ Real times consist of 0.376 seconds GC time, and 28.501 seconds non-GC time. ]
  [ Run times consist of 1.307 seconds GC time, and 28.476 seconds non-GC time. ]
  103.13% CPU
  109,521,943,200 processor cycles
  28,616,422,400 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  29.827 seconds of real time
  30.837017 seconds of total run time (30.733974 user, 0.103043 system)
  [ Real times consist of 0.366 seconds GC time, and 29.461 seconds non-GC time. ]
  [ Run times consist of 1.449 seconds GC time, and 29.389 seconds non-GC time. ]
  103.39% CPU
  113,119,560,330 processor cycles
  32,681,654,016 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  26.700 seconds of real time
  27.476609 seconds of total run time (27.459955 user, 0.016654 system)
  [ Real times consist of 0.200 seconds GC time, and 26.500 seconds non-GC time. ]
  [ Run times consist of 0.998 seconds GC time, and 26.479 seconds non-GC time. ]
  102.91% CPU
  101,287,568,806 processor cycles
  12,132,932,608 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  29.107 seconds of real time
  29.094719 seconds of total run time (29.094719 user, 0.000000 system)
  99.96% CPU
  110,401,129,212 processor cycles
  1,543,552 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.3.8.11.HEAD.17-ea2e53fe4

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  15.400 seconds of real time
  17.888194 seconds of total run time (17.847910 user, 0.040284 system)
  [ Real times consist of 1.043 seconds GC time, and 14.357 seconds non-GC time. ]
  [ Run times consist of 3.591 seconds GC time, and 14.298 seconds non-GC time. ]
  116.16% CPU
  58,404,361,478 processor cycles
  17,594,185,600 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  16.526 seconds of real time
  19.212838 seconds of total run time (19.149257 user, 0.063581 system)
  [ Real times consist of 1.263 seconds GC time, and 15.263 seconds non-GC time. ]
  [ Run times consist of 4.010 seconds GC time, and 15.203 seconds non-GC time. ]
  116.26% CPU
  62,678,182,490 processor cycles
  19,784,787,328 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  10.013 seconds of real time
  10.713725 seconds of total run time (10.713725 user, 0.000000 system)
  [ Real times consist of 0.243 seconds GC time, and 9.770 seconds non-GC time. ]
  [ Run times consist of 0.940 seconds GC time, and 9.774 seconds non-GC time. ]
  107.00% CPU
  37,979,305,580 processor cycles
  2,630,939,520 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  6.500 seconds of real time
  6.497320 seconds of total run time (6.497320 user, 0.000000 system)
  [ Run times consist of 0.001 seconds GC time, and 6.497 seconds non-GC time. ]
  99.95% CPU
  24,652,340,590 processor cycles
  80,461,088 bytes consed
#+end_example

* Benchmarks with pairing heap nodes as structs
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 2,776,104 microseconds (2.776104 seconds) to run.
       114,366 microseconds (0.114366 seconds, 4.12%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     2,858,273 microseconds (2.858273 seconds) were spent in user mode
        66,525 microseconds (0.066525 seconds) were spent in system mode
 3,096,088,800 bytes of memory allocated.
 451 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 3,343,017 microseconds (3.343017 seconds) to run.
       129,661 microseconds (0.129661 seconds, 3.88%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,427,226 microseconds (3.427226 seconds) were spent in user mode
        84,112 microseconds (0.084112 seconds) were spent in system mode
 3,531,162,400 bytes of memory allocated.
 451 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,575,586 microseconds (4.575586 seconds) to run.
       151,609 microseconds (0.151609 seconds, 3.31%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,157,535 microseconds (5.157535 seconds) were spent in user mode
        63,808 microseconds (0.063808 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 132 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,535,548 microseconds (6.535548 seconds) to run.
During that period, and with 16 available CPU cores,
     6,532,783 microseconds (6.532783 seconds) were spent in user mode
             0 microseconds (0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 43,001,339 microseconds (43.001340 seconds) to run.
        779,135 microseconds ( 0.779135 seconds, 1.81%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     43,632,579 microseconds (43.632580 seconds) were spent in user mode
        735,491 microseconds ( 0.735491 seconds) were spent in system mode
 28,405,573,600 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 48,242,192 microseconds (48.242190 seconds) to run.
        880,504 microseconds ( 0.880504 seconds, 1.83%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     48,911,321 microseconds (48.911320 seconds) were spent in user mode
        866,602 microseconds ( 0.866602 seconds) were spent in system mode
 32,453,860,800 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 52,846,472 microseconds (52.846474 seconds) to run.
      1,543,621 microseconds ( 1.543621 seconds, 2.92%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     57,767,643 microseconds (57.767643 seconds) were spent in user mode
        618,778 microseconds ( 0.618778 seconds) were spent in system mode
 12,002,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 83,277,462 microseconds (83.277466 seconds) to run.
During that period, and with 16 available CPU cores,
     83,252,182 microseconds (83.252180 seconds) were spent in user mode
              0 microseconds ( 0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 20,237,112 microseconds (20.237112 seconds) to run.
      5,168,918 microseconds ( 5.168918 seconds, 25.54%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     20,734,308 microseconds (20.734308 seconds) were spent in user mode
        443,423 microseconds ( 0.443423 seconds) were spent in system mode
 17,203,634,400 bytes of memory allocated.
 928 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 22,642,207 microseconds (22.642208 seconds) to run.
      5,395,607 microseconds ( 5.395607 seconds, 23.83%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,225,773 microseconds (23.225773 seconds) were spent in user mode
        472,751 microseconds ( 0.472751 seconds) were spent in system mode
 19,388,541,600 bytes of memory allocated.
 1,408 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 33,906,022 microseconds (33.906025 seconds) to run.
      2,363,777 microseconds ( 2.363777 seconds, 6.97%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     35,758,558 microseconds (35.758560 seconds) were spent in user mode
        105,533 microseconds ( 0.105533 seconds) were spent in system mode
 2,520,001,600 bytes of memory allocated.
 160 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 22,328,207 microseconds (22.328209 seconds) to run.
         16,996 microseconds ( 0.016996 seconds, 0.08%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     22,028,990 microseconds (22.028990 seconds) were spent in user mode
         63,968 microseconds ( 0.063968 seconds) were spent in system mode
 78,532,800 bytes of memory allocated.
#+end_example

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.3.8.11.HEAD.17-ea2e53fe4

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  1.540 seconds of real time
  1.593267 seconds of total run time (1.566570 user, 0.026697 system)
  [ Real times consist of 0.039 seconds GC time, and 1.501 seconds non-GC time. ]
  [ Run times consist of 0.098 seconds GC time, and 1.496 seconds non-GC time. ]
  103.44% CPU
  5,846,728,298 processor cycles
  3,117,491,584 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  1.753 seconds of real time
  1.820699 seconds of total run time (1.807356 user, 0.013343 system)
  [ Real times consist of 0.056 seconds GC time, and 1.697 seconds non-GC time. ]
  [ Run times consist of 0.114 seconds GC time, and 1.707 seconds non-GC time. ]
  103.88% CPU
  6,648,926,386 processor cycles
  3,555,092,992 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  1.196 seconds of real time
  1.231801 seconds of total run time (1.221794 user, 0.010007 system)
  [ Real times consist of 0.023 seconds GC time, and 1.173 seconds non-GC time. ]
  [ Run times consist of 0.050 seconds GC time, and 1.182 seconds non-GC time. ]
  103.01% CPU
  4,545,339,676 processor cycles
  1,209,733,888 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.516 seconds of real time
  1.516071 seconds of total run time (1.516071 user, 0.000000 system)
  100.00% CPU
  5,752,949,390 processor cycles
  1,540,480 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.3.8.11.HEAD.17-ea2e53fe4

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  31.053 seconds of real time
  32.030070 seconds of total run time (31.960457 user, 0.069613 system)
  [ Real times consist of 0.370 seconds GC time, and 30.683 seconds non-GC time. ]
  [ Run times consist of 1.399 seconds GC time, and 30.632 seconds non-GC time. ]
  103.15% CPU
  117,790,266,566 processor cycles
  28,617,227,392 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  31.967 seconds of real time
  33.041024 seconds of total run time (32.957373 user, 0.083651 system)
  [ Real times consist of 0.396 seconds GC time, and 31.571 seconds non-GC time. ]
  [ Run times consist of 1.536 seconds GC time, and 31.506 seconds non-GC time. ]
  103.36% CPU
  121,247,655,412 processor cycles
  32,686,473,472 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  28.837 seconds of real time
  29.634145 seconds of total run time (29.594445 user, 0.039700 system)
  [ Real times consist of 0.216 seconds GC time, and 28.621 seconds non-GC time. ]
  [ Run times consist of 1.044 seconds GC time, and 28.591 seconds non-GC time. ]
  102.76% CPU
  109,377,876,080 processor cycles
  12,133,480,832 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  31.573 seconds of real time
  31.559352 seconds of total run time (31.559352 user, 0.000000 system)
  99.96% CPU
  119,759,708,678 processor cycles
  1,612,672 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.3.8.11.HEAD.17-ea2e53fe4

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  15.706 seconds of real time
  18.286400 seconds of total run time (18.207056 user, 0.079344 system)
  [ Real times consist of 1.083 seconds GC time, and 14.623 seconds non-GC time. ]
  [ Run times consist of 3.698 seconds GC time, and 14.589 seconds non-GC time. ]
  116.43% CPU
  59,565,967,556 processor cycles
  17,596,484,480 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  17.040 seconds of real time
  19.831299 seconds of total run time (19.764952 user, 0.066347 system)
  [ Real times consist of 1.300 seconds GC time, and 15.740 seconds non-GC time. ]
  [ Run times consist of 4.114 seconds GC time, and 15.718 seconds non-GC time. ]
  116.38% CPU
  64,636,284,490 processor cycles
  19,817,314,048 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  9.980 seconds of real time
  10.716727 seconds of total run time (10.696749 user, 0.019978 system)
  [ Real times consist of 0.216 seconds GC time, and 9.764 seconds non-GC time. ]
  [ Run times consist of 0.965 seconds GC time, and 9.752 seconds non-GC time. ]
  107.38% CPU
  37,848,236,360 processor cycles
  2,624,408,960 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  6.473 seconds of real time
  6.472394 seconds of total run time (6.472394 user, 0.000000 system)
  [ Real times consist of 0.003 seconds GC time, and 6.470 seconds non-GC time. ]
  [ Run times consist of 0.001 seconds GC time, and 6.472 seconds non-GC time. ]
  99.98% CPU
  24,559,148,858 processor cycles
  80,488,608 bytes consed
#+end_example
