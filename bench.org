#+title: Simple pairing heap benchmarks
#+options: num:nil toc:2 ^:nil

* [1/1] Tasks                                                      :noexport:
** DONE Benchmark against damn fast priority queue
CLOSED: [2021-12-07 Tue 14:14]

Randomly stumbled upon https://github.com/phoe/damn-fast-priority-queue, which
looks like a good candidate to include in the benchmarks.

* Benchmark code                                                   :noexport:

The following two code blocks must be evaluated before evaluating the
benchmark blocks (using ~C-c C-c~).

#+caption: Setup code
#+begin_src lisp :results silent
  (eval-when (:load-toplevel :compile-toplevel :execute)
    (unless (find-package '#:alexandria)
      (ql:quickload "alexandria"))
    (unless (find-package '#:simple-pairing-heap)
      (ql:quickload "simple-pairing-heap"))
    (unless (find-package '#:bodge-heap)
      (ql:quickload "bodge-heap"))
    (unless (find-package '#:damn-fast-priority-queue)
      (ql:quickload "damn-fast-priority-queue")))
#+end_src

#+caption: Benchmark code
#+begin_src lisp :results silent
  (defun benchmark (&key (n 1000)
                         (m 1000)
                         (repeat 50)
                         (warmup 3)
                         (key #'identity)
                         (node-constructor #'identity))
    ;; Damn fast priority queue only supports (UNSIGNED-BYTE 32) keys.
    (assert (< (+ n m) (expt 2 32))
            (n m)
            "Too many items (~D + ~D = ~D)."
            n m (+ n m))
    (let* ((items (alexandria:shuffle
                   (mapcar node-constructor (alexandria:iota (+ n m)))))
           (init-items (subseq items 0 n))
           (more-items (nthcdr n items)))
      (macrolet ((bench ((heap-var item-var description)
                         new add del)
                   `(progn
                      (write-line ,description *trace-output*)
                      ,#+sbcl (sb-ext:gc :full t)
                      (flet ((run ()
                               (let ((,heap-var ,new))
                                 (loop for ,item-var in init-items
                                       do ,add)
                                 (loop for ,item-var in more-items
                                       do ,del ,add))))
                        (loop repeat warmup do (run))
                        (time
                         (loop repeat repeat do (run)))
                        (finish-output *trace-output*)))))
        (format *trace-output*
                "~&Heap of size ~D, with ~D reinserts (×~D), on ~A ~A~2%"
                n m repeat
                (lisp-implementation-type) (lisp-implementation-version))
        (bench (heap item "SIMPLE-PAIRING-HEAP (recursive)")
               (simple-pairing-heap:create :recursive-merge t)
               (simple-pairing-heap:insert item heap (funcall key item))
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "SIMPLE-PAIRING-HEAP (consing)")
               (simple-pairing-heap:create)
               (simple-pairing-heap:insert item heap (funcall key item))
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "BODGE-HEAP (pairing)")
               (bodge-heap:make-pairing-heap :key key)
               (bodge-heap:pairing-heap-push heap item)
               (bodge-heap:pairing-heap-pop heap))
        (bench (heap item "DAMN-FAST-PRIORITY-QUEUE")
               (damn-fast-priority-queue:make-queue)
               (damn-fast-priority-queue:enqueue heap item (funcall key item))
               (damn-fast-priority-queue:dequeue heap))
        t)))
#+end_src

#+caption: Sampling code
#+name: run-benchmark
#+begin_src lisp :var heap-size=1000 reinserts=1000 repeats=50
  (let ((output (with-output-to-string (*trace-output*)
                  (benchmark :n heap-size
                             :m reinserts
                             :repeat repeats
                             :node-constructor (lambda (n) (cons n n))
                             :key #'car))))
    (string-right-trim '(#\space #\return #\newline) output))
#+end_src

* Benchmarks with pairing heap nodes as cons cells
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 22,587,142 microseconds (22.587143 seconds) to run.
        448,303 microseconds ( 0.448303 seconds, 1.98%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,050,000 microseconds (23.050000 seconds) were spent in user mode
         65,289 microseconds ( 0.065289 seconds) were spent in system mode
 1,347,645,600 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 22,957,732 microseconds (22.957731 seconds) to run.
        589,163 microseconds ( 0.589163 seconds, 2.57%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,598,699 microseconds (23.598700 seconds) were spent in user mode
         62,432 microseconds ( 0.062432 seconds) were spent in system mode
 1,782,719,200 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,896,226 microseconds (4.896226 seconds) to run.
       601,396 microseconds (0.601396 seconds, 12.28%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,217,958 microseconds (5.217958 seconds) were spent in user mode
        32,170 microseconds (0.032170 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,664,833 microseconds (6.664833 seconds) to run.
         1,524 microseconds (0.001524 seconds, 0.02%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,585,510 microseconds (6.585510 seconds) were spent in user mode
         2,932 microseconds (0.002932 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

Other benchmarks take even longer, so not even trying.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.2.0.8.HEAD.3-3e4090d05

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.779 seconds of real time
  0.837715 seconds of total run time (0.833231 user, 0.004484 system)
  [ Run times consist of 0.037 seconds GC time, and 0.801 seconds non-GC time. ]
  107.57% CPU
  2,956,471,668 processor cycles
  1,351,826,176 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.846 seconds of real time
  0.923098 seconds of total run time (0.908034 user, 0.015064 system)
  [ Run times consist of 0.051 seconds GC time, and 0.873 seconds non-GC time. ]
  109.10% CPU
  3,210,487,380 processor cycles
  1,787,915,280 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.856 seconds of real time
  0.907253 seconds of total run time (0.903095 user, 0.004158 system)
  [ Run times consist of 0.033 seconds GC time, and 0.875 seconds non-GC time. ]
  105.96% CPU
  3,247,868,132 processor cycles
  1,202,396,912 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.339 seconds of real time
  1.340326 seconds of total run time (1.340326 user, 0.000000 system)
  100.07% CPU
  5,085,021,452 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.2.0.8.HEAD.3-3e4090d05

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.679 seconds of real time
  6.835573 seconds of total run time (6.807071 user, 0.028502 system)
  [ Run times consist of 0.319 seconds GC time, and 6.517 seconds non-GC time. ]
  102.35% CPU
  25,344,338,640 processor cycles
  12,200,987,376 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.083 seconds of real time
  7.363900 seconds of total run time (7.287166 user, 0.076734 system)
  [ Run times consist of 0.399 seconds GC time, and 6.965 seconds non-GC time. ]
  103.97% CPU
  26,866,517,484 processor cycles
  16,248,905,616 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.519 seconds of real time
  7.735332 seconds of total run time (7.666624 user, 0.068708 system)
  [ Run times consist of 0.306 seconds GC time, and 7.430 seconds non-GC time. ]
  102.87% CPU
  28,524,387,640 processor cycles
  12,002,387,648 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.316 seconds of real time
  13.315600 seconds of total run time (13.315600 user, 0.000000 system)
  100.00% CPU
  50,518,632,562 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.2.0.8.HEAD.3-3e4090d05

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  7.179 seconds of real time
  7.424092 seconds of total run time (7.172584 user, 0.251508 system)
  [ Run times consist of 0.864 seconds GC time, and 6.561 seconds non-GC time. ]
  103.41% CPU
  27,229,447,998 processor cycles
  8,181,772,016 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.896 seconds of real time
  8.265062 seconds of total run time (8.030026 user, 0.235036 system)
  [ Run times consist of 1.044 seconds GC time, and 7.222 seconds non-GC time. ]
  104.67% CPU
  29,957,732,326 processor cycles
  10,366,725,472 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.903 seconds of real time
  5.974770 seconds of total run time (5.877492 user, 0.097278 system)
  [ Run times consist of 0.474 seconds GC time, and 5.501 seconds non-GC time. ]
  101.22% CPU
  22,390,167,948 processor cycles
  2,519,997,936 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.479 seconds of real time
  4.481100 seconds of total run time (4.473366 user, 0.007734 system)
  [ Run times consist of 0.001 seconds GC time, and 4.481 seconds non-GC time. ]
  100.04% CPU
  16,998,774,384 processor cycles
  78,473,680 bytes consed
#+end_example

* Benchmarks with pairing heap nodes as structs
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 2,776,104 microseconds (2.776104 seconds) to run.
       114,366 microseconds (0.114366 seconds, 4.12%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     2,858,273 microseconds (2.858273 seconds) were spent in user mode
        66,525 microseconds (0.066525 seconds) were spent in system mode
 3,096,088,800 bytes of memory allocated.
 451 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 3,343,017 microseconds (3.343017 seconds) to run.
       129,661 microseconds (0.129661 seconds, 3.88%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,427,226 microseconds (3.427226 seconds) were spent in user mode
        84,112 microseconds (0.084112 seconds) were spent in system mode
 3,531,162,400 bytes of memory allocated.
 451 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,575,586 microseconds (4.575586 seconds) to run.
       151,609 microseconds (0.151609 seconds, 3.31%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,157,535 microseconds (5.157535 seconds) were spent in user mode
        63,808 microseconds (0.063808 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 132 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,535,548 microseconds (6.535548 seconds) to run.
During that period, and with 16 available CPU cores,
     6,532,783 microseconds (6.532783 seconds) were spent in user mode
             0 microseconds (0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 43,001,339 microseconds (43.001340 seconds) to run.
        779,135 microseconds ( 0.779135 seconds, 1.81%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     43,632,579 microseconds (43.632580 seconds) were spent in user mode
        735,491 microseconds ( 0.735491 seconds) were spent in system mode
 28,405,573,600 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 48,242,192 microseconds (48.242190 seconds) to run.
        880,504 microseconds ( 0.880504 seconds, 1.83%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     48,911,321 microseconds (48.911320 seconds) were spent in user mode
        866,602 microseconds ( 0.866602 seconds) were spent in system mode
 32,453,860,800 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 52,846,472 microseconds (52.846474 seconds) to run.
      1,543,621 microseconds ( 1.543621 seconds, 2.92%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     57,767,643 microseconds (57.767643 seconds) were spent in user mode
        618,778 microseconds ( 0.618778 seconds) were spent in system mode
 12,002,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 83,277,462 microseconds (83.277466 seconds) to run.
During that period, and with 16 available CPU cores,
     83,252,182 microseconds (83.252180 seconds) were spent in user mode
              0 microseconds ( 0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 20,237,112 microseconds (20.237112 seconds) to run.
      5,168,918 microseconds ( 5.168918 seconds, 25.54%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     20,734,308 microseconds (20.734308 seconds) were spent in user mode
        443,423 microseconds ( 0.443423 seconds) were spent in system mode
 17,203,634,400 bytes of memory allocated.
 928 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 22,642,207 microseconds (22.642208 seconds) to run.
      5,395,607 microseconds ( 5.395607 seconds, 23.83%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,225,773 microseconds (23.225773 seconds) were spent in user mode
        472,751 microseconds ( 0.472751 seconds) were spent in system mode
 19,388,541,600 bytes of memory allocated.
 1,408 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 33,906,022 microseconds (33.906025 seconds) to run.
      2,363,777 microseconds ( 2.363777 seconds, 6.97%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     35,758,558 microseconds (35.758560 seconds) were spent in user mode
        105,533 microseconds ( 0.105533 seconds) were spent in system mode
 2,520,001,600 bytes of memory allocated.
 160 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 22,328,207 microseconds (22.328209 seconds) to run.
         16,996 microseconds ( 0.016996 seconds, 0.08%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     22,028,990 microseconds (22.028990 seconds) were spent in user mode
         63,968 microseconds ( 0.063968 seconds) were spent in system mode
 78,532,800 bytes of memory allocated.
#+end_example

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.2.0.36.HEAD.3-618dfba1f

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.763 seconds of real time
  0.804266 seconds of total run time (0.804039 user, 0.000227 system)
  [ Run times consist of 0.058 seconds GC time, and 0.747 seconds non-GC time. ]
  105.37% CPU
  2,899,290,332 processor cycles
  2,224,160,512 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.806 seconds of real time
  0.882806 seconds of total run time (0.874831 user, 0.007975 system)
  [ Run times consist of 0.068 seconds GC time, and 0.815 seconds non-GC time. ]
  109.55% CPU
  3,071,182,572 processor cycles
  2,659,592,928 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.830 seconds of real time
  0.867637 seconds of total run time (0.853447 user, 0.014190 system)
  [ Run times consist of 0.032 seconds GC time, and 0.836 seconds non-GC time. ]
  104.58% CPU
  3,145,536,640 processor cycles
  1,202,409,536 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.330 seconds of real time
  1.330138 seconds of total run time (1.330138 user, 0.000000 system)
  100.00% CPU
  5,046,587,568 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.2.0.36.HEAD.3-618dfba1f

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.833 seconds of real time
  7.404602 seconds of total run time (7.339435 user, 0.065167 system)
  [ Run times consist of 0.502 seconds GC time, and 6.903 seconds non-GC time. ]
  108.37% CPU
  25,911,838,658 processor cycles
  20,303,175,568 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.083 seconds of real time
  7.561588 seconds of total run time (7.486017 user, 0.075571 system)
  [ Run times consist of 0.577 seconds GC time, and 6.985 seconds non-GC time. ]
  106.76% CPU
  26,857,147,976 processor cycles
  24,351,327,120 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.416 seconds of real time
  7.634455 seconds of total run time (7.602604 user, 0.031851 system)
  [ Run times consist of 0.307 seconds GC time, and 7.328 seconds non-GC time. ]
  102.94% CPU
  28,138,915,868 processor cycles
  12,002,397,632 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.123 seconds of real time
  13.118160 seconds of total run time (13.118160 user, 0.000000 system)
  99.96% CPU
  49,775,528,578 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.2.0.36.HEAD.3-618dfba1f

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.420 seconds of real time
  6.659219 seconds of total run time (6.274127 user, 0.385092 system)
  [ Run times consist of 1.500 seconds GC time, and 5.160 seconds non-GC time. ]
  103.72% CPU
  24,342,747,712 processor cycles
  12,692,648,560 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.340 seconds of real time
  7.808845 seconds of total run time (7.304444 user, 0.504401 system)
  [ Run times consist of 1.736 seconds GC time, and 6.073 seconds non-GC time. ]
  106.39% CPU
  27,840,487,048 processor cycles
  14,877,609,952 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.776 seconds of real time
  5.908511 seconds of total run time (5.785796 user, 0.122715 system)
  [ Run times consist of 0.491 seconds GC time, and 5.418 seconds non-GC time. ]
  102.30% CPU
  21,917,719,800 processor cycles
  2,519,997,936 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.510 seconds of real time
  4.508986 seconds of total run time (4.501858 user, 0.007128 system)
  [ Run times consist of 0.001 seconds GC time, and 4.508 seconds non-GC time. ]
  99.98% CPU
  17,100,371,754 processor cycles
  78,473,680 bytes consed
#+end_example
