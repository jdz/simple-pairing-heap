#+title: Simple pairing heap benchmarks
#+options: num:nil toc:2 ^:nil

* [1/1] Tasks                                                      :noexport:
** DONE Benchmark against damn fast priority queue
CLOSED: [2021-12-07 Tue 14:14]

Randomly stumbled upon https://github.com/phoe/damn-fast-priority-queue, which
looks like a good candidate to include in the benchmarks.

* Benchmark code                                                   :noexport:

The following two code blocks must be evaluated before evaluating the
benchmark blocks (using ~C-c C-c~).

#+caption: Setup code
#+begin_src lisp :results silent
  (eval-when (:load-toplevel :compile-toplevel :execute)
    (unless (find-package '#:alexandria)
      (ql:quickload "alexandria"))
    (unless (find-package '#:simple-pairing-heap)
      (ql:quickload "simple-pairing-heap"))
    (unless (find-package '#:bodge-heap)
      (ql:quickload "bodge-heap"))
    (unless (find-package '#:damn-fast-priority-queue)
      (ql:quickload "damn-fast-priority-queue")))
#+end_src

#+caption: Benchmark code
#+begin_src lisp :results silent
  (defun benchmark (&key (n 1000)
                         (m 1000)
                         (repeat 50)
                         (warmup 3)
                         (key #'identity)
                         (node-constructor #'identity))
    ;; Damn fast priority queue only supports (UNSIGNED-BYTE 32) keys.
    (assert (< (+ n m) (expt 2 32))
            (n m)
            "Too many items (~D + ~D = ~D)."
            n m (+ n m))
    (let* ((items (alexandria:shuffle
                   (mapcar node-constructor (alexandria:iota (+ n m)))))
           (init-items (subseq items 0 n))
           (more-items (nthcdr n items)))
      (macrolet ((bench ((heap-var item-var description)
                         new add del)
                   `(progn
                      (write-line ,description *trace-output*)
                      ,#+sbcl (sb-ext:gc :full t)
                      (flet ((run ()
                               (let ((,heap-var ,new))
                                 (loop for ,item-var in init-items
                                       do ,add)
                                 (loop for ,item-var in more-items
                                       do ,del ,add))))
                        (loop repeat warmup do (run))
                        (time
                         (loop repeat repeat do (run)))
                        (finish-output *trace-output*)))))
        (format *trace-output*
                "~&Heap of size ~D, with ~D reinserts (×~D), on ~A ~A~2%"
                n m repeat
                (lisp-implementation-type) (lisp-implementation-version))
        (bench (heap item "SIMPLE-PAIRING-HEAP (recursive)")
               (simple-pairing-heap:create :key key :recursive-merge t)
               (simple-pairing-heap:insert item heap)
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "SIMPLE-PAIRING-HEAP (consing)")
               (simple-pairing-heap:create :key key)
               (simple-pairing-heap:insert item heap)
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "BODGE-HEAP (pairing)")
               (bodge-heap:make-pairing-heap :key key)
               (bodge-heap:pairing-heap-push heap item)
               (bodge-heap:pairing-heap-pop heap))
        (bench (heap item "DAMN-FAST-PRIORITY-QUEUE")
               (damn-fast-priority-queue:make-queue)
               (damn-fast-priority-queue:enqueue heap item (funcall key item))
               (damn-fast-priority-queue:dequeue heap))
        t)))
#+end_src

#+caption: Sampling code
#+name: run-benchmark
#+begin_src lisp :var heap-size=1000 reinserts=1000 repeats=50
  (let ((output (with-output-to-string (*trace-output*)
                  (benchmark :n heap-size
                             :m reinserts
                             :repeat repeats
                             :node-constructor (lambda (n) (cons n n))
                             :key #'car))))
    (string-right-trim '(#\space #\return #\newline) output))
#+end_src

* Benchmarks with pairing heap nodes as cons cells
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 22,587,142 microseconds (22.587143 seconds) to run.
        448,303 microseconds ( 0.448303 seconds, 1.98%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,050,000 microseconds (23.050000 seconds) were spent in user mode
         65,289 microseconds ( 0.065289 seconds) were spent in system mode
 1,347,645,600 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 22,957,732 microseconds (22.957731 seconds) to run.
        589,163 microseconds ( 0.589163 seconds, 2.57%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,598,699 microseconds (23.598700 seconds) were spent in user mode
         62,432 microseconds ( 0.062432 seconds) were spent in system mode
 1,782,719,200 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,896,226 microseconds (4.896226 seconds) to run.
       601,396 microseconds (0.601396 seconds, 12.28%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,217,958 microseconds (5.217958 seconds) were spent in user mode
        32,170 microseconds (0.032170 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,664,833 microseconds (6.664833 seconds) to run.
         1,524 microseconds (0.001524 seconds, 0.02%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,585,510 microseconds (6.585510 seconds) were spent in user mode
         2,932 microseconds (0.002932 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

Other benchmarks take even longer, so not even trying.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.2.0.8.HEAD.3-3e4090d05

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.779 seconds of real time
  0.837715 seconds of total run time (0.833231 user, 0.004484 system)
  [ Run times consist of 0.037 seconds GC time, and 0.801 seconds non-GC time. ]
  107.57% CPU
  2,956,471,668 processor cycles
  1,351,826,176 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.846 seconds of real time
  0.923098 seconds of total run time (0.908034 user, 0.015064 system)
  [ Run times consist of 0.051 seconds GC time, and 0.873 seconds non-GC time. ]
  109.10% CPU
  3,210,487,380 processor cycles
  1,787,915,280 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.856 seconds of real time
  0.907253 seconds of total run time (0.903095 user, 0.004158 system)
  [ Run times consist of 0.033 seconds GC time, and 0.875 seconds non-GC time. ]
  105.96% CPU
  3,247,868,132 processor cycles
  1,202,396,912 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.339 seconds of real time
  1.340326 seconds of total run time (1.340326 user, 0.000000 system)
  100.07% CPU
  5,085,021,452 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.2.0.8.HEAD.3-3e4090d05

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.679 seconds of real time
  6.835573 seconds of total run time (6.807071 user, 0.028502 system)
  [ Run times consist of 0.319 seconds GC time, and 6.517 seconds non-GC time. ]
  102.35% CPU
  25,344,338,640 processor cycles
  12,200,987,376 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.083 seconds of real time
  7.363900 seconds of total run time (7.287166 user, 0.076734 system)
  [ Run times consist of 0.399 seconds GC time, and 6.965 seconds non-GC time. ]
  103.97% CPU
  26,866,517,484 processor cycles
  16,248,905,616 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.519 seconds of real time
  7.735332 seconds of total run time (7.666624 user, 0.068708 system)
  [ Run times consist of 0.306 seconds GC time, and 7.430 seconds non-GC time. ]
  102.87% CPU
  28,524,387,640 processor cycles
  12,002,387,648 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.316 seconds of real time
  13.315600 seconds of total run time (13.315600 user, 0.000000 system)
  100.00% CPU
  50,518,632,562 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.2.0.8.HEAD.3-3e4090d05

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  7.179 seconds of real time
  7.424092 seconds of total run time (7.172584 user, 0.251508 system)
  [ Run times consist of 0.864 seconds GC time, and 6.561 seconds non-GC time. ]
  103.41% CPU
  27,229,447,998 processor cycles
  8,181,772,016 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.896 seconds of real time
  8.265062 seconds of total run time (8.030026 user, 0.235036 system)
  [ Run times consist of 1.044 seconds GC time, and 7.222 seconds non-GC time. ]
  104.67% CPU
  29,957,732,326 processor cycles
  10,366,725,472 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.903 seconds of real time
  5.974770 seconds of total run time (5.877492 user, 0.097278 system)
  [ Run times consist of 0.474 seconds GC time, and 5.501 seconds non-GC time. ]
  101.22% CPU
  22,390,167,948 processor cycles
  2,519,997,936 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.479 seconds of real time
  4.481100 seconds of total run time (4.473366 user, 0.007734 system)
  [ Run times consist of 0.001 seconds GC time, and 4.481 seconds non-GC time. ]
  100.04% CPU
  16,998,774,384 processor cycles
  78,473,680 bytes consed
#+end_example

* Benchmarks with pairing heap nodes as structs
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 2,662,240 microseconds (2.662240 seconds) to run.
       111,134 microseconds (0.111134 seconds, 4.17%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     2,742,880 microseconds (2.742880 seconds) were spent in user mode
        21,830 microseconds (0.021830 seconds) were spent in system mode
 2,221,867,200 bytes of memory allocated.
 225 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 3,675,276 microseconds (3.675276 seconds) to run.
       130,924 microseconds (0.130924 seconds, 3.56%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,740,154 microseconds (3.740154 seconds) were spent in user mode
        61,855 microseconds (0.061855 seconds) were spent in system mode
 2,656,940,800 bytes of memory allocated.
 225 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,407,180 microseconds (4.407180 seconds) to run.
       168,476 microseconds (0.168476 seconds, 3.82%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     4,643,492 microseconds (4.643492 seconds) were spent in user mode
        50,518 microseconds (0.050518 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 129 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,479,452 microseconds (6.479452 seconds) to run.
           422 microseconds (0.000422 seconds, 0.01%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,477,646 microseconds (6.477646 seconds) were spent in user mode
             0 microseconds (0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 40,212,238 microseconds (40.212240 seconds) to run.
        553,096 microseconds ( 0.553096 seconds, 1.38%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     40,752,379 microseconds (40.752380 seconds) were spent in user mode
        447,789 microseconds ( 0.447789 seconds) were spent in system mode
 20,303,980,800 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 50,635,831 microseconds (50.635834 seconds) to run.
        693,797 microseconds ( 0.693797 seconds, 1.37%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     50,717,437 microseconds (50.717438 seconds) were spent in user mode
        863,483 microseconds ( 0.863483 seconds) were spent in system mode
 24,352,268,000 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 54,233,759 microseconds (54.233760 seconds) to run.
      1,565,222 microseconds ( 1.565222 seconds, 2.89%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     55,613,465 microseconds (55.613464 seconds) were spent in user mode
      1,321,364 microseconds ( 1.321364 seconds) were spent in system mode
 12,002,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 83,651,300 microseconds (83.651300 seconds) to run.
            456 microseconds ( 0.000456 seconds, 0.00%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     79,619,724 microseconds (79.619730 seconds) were spent in user mode
      1,906,599 microseconds ( 1.906599 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 20,108,633 microseconds (20.108631 seconds) to run.
      4,095,141 microseconds ( 4.095141 seconds, 20.37%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     20,261,623 microseconds (20.261623 seconds) were spent in user mode
        362,589 microseconds ( 0.362589 seconds) were spent in system mode
 12,692,726,400 bytes of memory allocated.
 800 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 24,467,893 microseconds (24.467892 seconds) to run.
      4,425,967 microseconds ( 4.425967 seconds, 18.09%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,583,468 microseconds (23.583467 seconds) were spent in user mode
      1,174,325 microseconds ( 1.174325 seconds) were spent in system mode
 14,877,633,600 bytes of memory allocated.
 896 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 34,427,471 microseconds (34.427470 seconds) to run.
      2,520,191 microseconds ( 2.520191 seconds, 7.32%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     33,733,223 microseconds (33.733223 seconds) were spent in user mode
        906,055 microseconds ( 0.906055 seconds) were spent in system mode
 2,520,001,600 bytes of memory allocated.
 128 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 22,279,603 microseconds (22.279604 seconds) to run.
         30,005 microseconds ( 0.030005 seconds, 0.13%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     21,126,583 microseconds (21.126583 seconds) were spent in user mode
        631,544 microseconds ( 0.631544 seconds) were spent in system mode
 78,532,800 bytes of memory allocated.
#+end_example

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.1.11.65.HEAD.3-69c5739bb

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.986 seconds of real time
  1.060131 seconds of total run time (1.059570 user, 0.000561 system)
  [ Run times consist of 0.058 seconds GC time, and 1.003 seconds non-GC time. ]
  107.51% CPU
  3,743,594,510 processor cycles
  2,222,750,224 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.986 seconds of real time
  1.084297 seconds of total run time (1.079800 user, 0.004497 system)
  [ Run times consist of 0.070 seconds GC time, and 1.015 seconds non-GC time. ]
  109.94% CPU
  3,752,458,010 processor cycles
  2,658,005,616 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.833 seconds of real time
  0.867504 seconds of total run time (0.864073 user, 0.003431 system)
  [ Run times consist of 0.033 seconds GC time, and 0.835 seconds non-GC time. ]
  104.20% CPU
  3,158,633,492 processor cycles
  1,202,406,416 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.323 seconds of real time
  1.323063 seconds of total run time (1.323063 user, 0.000000 system)
  100.00% CPU
  5,019,708,002 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.1.11.65.HEAD.3-69c5739bb

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  8.666 seconds of real time
  9.041410 seconds of total run time (8.982402 user, 0.059008 system)
  [ Run times consist of 0.524 seconds GC time, and 8.518 seconds non-GC time. ]
  104.33% CPU
  32,868,764,734 processor cycles
  20,307,277,488 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  8.573 seconds of real time
  8.966212 seconds of total run time (8.871472 user, 0.094740 system)
  [ Run times consist of 0.588 seconds GC time, and 8.379 seconds non-GC time. ]
  104.58% CPU
  32,522,518,994 processor cycles
  24,356,103,680 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.470 seconds of real time
  7.657456 seconds of total run time (7.641543 user, 0.015913 system)
  [ Run times consist of 0.307 seconds GC time, and 7.351 seconds non-GC time. ]
  102.50% CPU
  28,331,997,820 processor cycles
  12,002,394,416 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.330 seconds of real time
  13.325077 seconds of total run time (13.325077 user, 0.000000 system)
  99.96% CPU
  50,555,588,170 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.1.11.65.HEAD.3-69c5739bb

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  9.106 seconds of real time
  9.407390 seconds of total run time (8.911670 user, 0.495720 system)
  [ Run times consist of 1.583 seconds GC time, and 7.825 seconds non-GC time. ]
  103.31% CPU
  34,541,937,452 processor cycles
  12,669,768,976 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  9.770 seconds of real time
  10.168335 seconds of total run time (9.680254 user, 0.488081 system)
  [ Run times consist of 1.731 seconds GC time, and 8.438 seconds non-GC time. ]
  104.07% CPU
  37,049,344,310 processor cycles
  14,851,041,168 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.783 seconds of real time
  5.834045 seconds of total run time (5.730539 user, 0.103506 system)
  [ Run times consist of 0.465 seconds GC time, and 5.370 seconds non-GC time. ]
  100.88% CPU
  21,935,215,114 processor cycles
  2,519,996,640 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.543 seconds of real time
  4.542007 seconds of total run time (4.531152 user, 0.010855 system)
  [ Run times consist of 0.001 seconds GC time, and 4.542 seconds non-GC time. ]
  99.98% CPU
  17,228,521,130 processor cycles
  78,473,680 bytes consed
#+end_example
