#+TITLE: Simple pairing heap benchmarks
#+OPTIONS: num:nil toc:2 ^:nil
#+HTML_HEAD_EXTRA: <style>pre.example, pre.src { display: inline-block; min-width: 100%; } table { margin-top: 1ex; }</style>
#+PROPERTY: header-args :eval never-export

* [1/1] Tasks                                                      :noexport:
** DONE Benchmark against damn fast priority queue
CLOSED: [2021-12-07 Tue 14:14]

Randomly stumbled upon https://github.com/phoe/damn-fast-priority-queue, which
looks like a good candidate to include in the benchmarks.

* Benchmark code                                                   :noexport:

The following two code blocks must be evaluated before evaluating the
benchmark blocks (using ~C-c C-c~).

#+caption: Setup code
#+begin_src lisp :results silent
  (eval-when (:load-toplevel :compile-toplevel :execute)
    (unless (find-package '#:alexandria)
      (ql:quickload "alexandria"))
    (unless (find-package '#:simple-pairing-heap)
      (ql:quickload "simple-pairing-heap"))
    (unless (find-package '#:bodge-heap)
      (ql:quickload "bodge-heap"))
    (unless (find-package '#:damn-fast-priority-queue)
      (ql:quickload "damn-fast-priority-queue")))
#+end_src

#+caption: Benchmark code
#+begin_src lisp :results silent
  (defun benchmark (&key (n 1000)
                         (m 1000)
                         (repeat 50)
                         (warmup 3)
                         (key #'identity)
                         (node-constructor #'identity))
    ;; Damn fast priority queue only supports (UNSIGNED-BYTE 32) keys.
    (assert (< (+ n m) (expt 2 32))
            (n m)
            "Too many items (~D + ~D = ~D)."
            n m (+ n m))
    (let* ((items (alexandria:shuffle
                   (mapcar node-constructor (alexandria:iota (+ n m)))))
           (init-items (subseq items 0 n))
           (more-items (nthcdr n items)))
      (macrolet ((bench ((heap-var item-var description)
                         new add del)
                   `(progn
                      (write-line ,description *trace-output*)
                      ,#+sbcl (sb-ext:gc :full t)
                      (flet ((run ()
                               (let ((,heap-var ,new))
                                 (loop for ,item-var in init-items
                                       do ,add)
                                 (loop for ,item-var in more-items
                                       do ,del ,add))))
                        (loop repeat warmup do (run))
                        (time
                         (loop repeat repeat do (run)))
                        (finish-output *trace-output*)))))
        (format *trace-output*
                "~&Heap of size ~D, with ~D reinserts (×~D), on ~A ~A~2%"
                n m repeat
                (lisp-implementation-type) (lisp-implementation-version))
        (bench (heap item "SIMPLE-PAIRING-HEAP (recursive)")
               (simple-pairing-heap:create :recursive-merge t)
               (simple-pairing-heap:insert item heap (funcall key item))
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "SIMPLE-PAIRING-HEAP (consing)")
               (simple-pairing-heap:create)
               (simple-pairing-heap:insert item heap (funcall key item))
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "BODGE-HEAP (pairing)")
               (bodge-heap:make-pairing-heap :key key)
               (bodge-heap:pairing-heap-push heap item)
               (bodge-heap:pairing-heap-pop heap))
        (bench (heap item "DAMN-FAST-PRIORITY-QUEUE")
               (damn-fast-priority-queue:make-queue)
               (damn-fast-priority-queue:enqueue heap item (funcall key item))
               (damn-fast-priority-queue:dequeue heap))
        t)))
#+end_src

#+caption: Sampling code
#+name: run-benchmark
#+begin_src lisp :var heap-size=1000 reinserts=1000 repeats=50
  (let ((output (with-output-to-string (*trace-output*)
                  (benchmark :n heap-size
                             :m reinserts
                             :repeat repeats
                             :node-constructor (lambda (n) (cons n n))
                             :key #'car))))
    (string-right-trim '(#\space #\return #\newline) output))
#+end_src

* Environment details
** Features

#+caption: Features
#+name: cl-features
#+begin_src lisp :exports results :results output
  (let ((*print-length* nil))
    (dolist (sym (sort (copy-list *features*) #'string<))
      (prin1 sym)
      (terpri)))
#+end_src

#+RESULTS: cl-features
#+begin_example
:64-BIT
:ANSI-CL
:ARENA-ALLOCATOR
:ASDF
:ASDF-UNICODE
:ASDF2
:ASDF3
:ASDF3.1
:ASDF3.2
:ASDF3.3
:COMMON-LISP
:ELF
:GENCGC
:HUNCHENTOOT-NO-SSL
:IEEE-FLOATING-POINT
:LINUX
:LITTLE-ENDIAN
:MCCLIM-FFI-FREETYPE
:NON-BASE-CHARS-EXIST-P
:OS-UNIX
:PACKAGE-LOCAL-NICKNAMES
:QUICKLISP
:SB-CORE-COMPRESSION
:SB-LDB
:SB-PACKAGE-LOCKS
:SB-THREAD
:SB-UNICODE
:SBCL
ALEXANDRIA::SEQUENCE-EMPTYP
:SWANK
:UNIX
:X86-64
#+end_example

** Compiler policy

#+caption: Compiler policy
#+name: sbcl-compiler-policy
#+begin_src lisp :results output
  (sb-ext:describe-compiler-policy)
#+end_src

#+RESULTS: sbcl-compiler-policy
#+begin_example
  Basic qualities:
COMPILATION-SPEED = 1
DEBUG = 2
SAFETY = 1
SPACE = 1
SPEED = 1
INHIBIT-WARNINGS = 1
  Dependent qualities:
SB-C::CHECK-CONSTANT-MODIFICATION = 1 -> 1 (maybe)
SB-C::TYPE-CHECK = 1 -> 3 (full)
SB-C::LET-CONVERSION = 1 -> 0 (off)
SB-C:ALIEN-FUNCALL-SAVES-FP-AND-PC = 1 -> 3 (yes)
SB-C:VERIFY-ARG-COUNT = 1 -> 3 (yes)
SB-C::INSERT-DEBUG-CATCH = 1 -> 1 (maybe)
SB-C::RECOGNIZE-SELF-CALLS = 1 -> 0 (no)
SB-C::FLOAT-ACCURACY = 1 -> 3 (full)
SB-C:INSERT-STEP-CONDITIONS = 1 -> 2 (no)
SB-C::COMPUTE-DEBUG-FUN = 1 -> 2 (yes)
SB-C:STORE-SOURCE-FORM = 1 -> 2 (yes)
SB-C::PRESERVE-SINGLE-USE-DEBUG-VARIABLES = 1 -> 3 (yes)
SB-C::PRESERVE-CONSTANTS = 1 -> 0 (no)
SB-C:INSERT-ARRAY-BOUNDS-CHECKS = 1 -> 3 (yes)
SB-C::AREF-TRAPPING = 1 -> 0 (no)
SB-C::STORE-XREF-DATA = 1 -> 3 (yes)
SB-C:STORE-COVERAGE-DATA = 1 -> 0 (no)
SB-C:INSTRUMENT-CONSING = 1 -> 1 (no)
SB-C::STORE-CLOSURE-DEBUG-POINTER = 1 -> 0 (no)
SB-C:JUMP-TABLE = 1 -> 1 (auto)
#+end_example

* Benchmarks with pairing heap nodes as cons cells
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 22,587,142 microseconds (22.587143 seconds) to run.
        448,303 microseconds ( 0.448303 seconds, 1.98%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,050,000 microseconds (23.050000 seconds) were spent in user mode
         65,289 microseconds ( 0.065289 seconds) were spent in system mode
 1,347,645,600 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 22,957,732 microseconds (22.957731 seconds) to run.
        589,163 microseconds ( 0.589163 seconds, 2.57%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,598,699 microseconds (23.598700 seconds) were spent in user mode
         62,432 microseconds ( 0.062432 seconds) were spent in system mode
 1,782,719,200 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,896,226 microseconds (4.896226 seconds) to run.
       601,396 microseconds (0.601396 seconds, 12.28%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,217,958 microseconds (5.217958 seconds) were spent in user mode
        32,170 microseconds (0.032170 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,664,833 microseconds (6.664833 seconds) to run.
         1,524 microseconds (0.001524 seconds, 0.02%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,585,510 microseconds (6.585510 seconds) were spent in user mode
         2,932 microseconds (0.002932 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

Other benchmarks take even longer, so not even trying.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.3.1.93.HEAD.3-da1536544

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.710 seconds of real time
  0.707158 seconds of total run time (0.687278 user, 0.019880 system)
  [ Run times consist of 0.038 seconds GC time, and 0.670 seconds non-GC time. ]
  99.58% CPU
  2,695,770,578 processor cycles
  2,224,415,472 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.753 seconds of real time
  0.749163 seconds of total run time (0.742190 user, 0.006973 system)
  [ Run times consist of 0.047 seconds GC time, and 0.703 seconds non-GC time. ]
  99.47% CPU
  2,854,404,694 processor cycles
  2,659,821,568 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.833 seconds of real time
  0.831278 seconds of total run time (0.827859 user, 0.003419 system)
  [ Run times consist of 0.020 seconds GC time, and 0.812 seconds non-GC time. ]
  99.76% CPU
  3,164,607,624 processor cycles
  1,202,427,088 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.376 seconds of real time
  1.373981 seconds of total run time (1.373981 user, 0.000000 system)
  99.85% CPU
  5,213,428,202 processor cycles
  1,068,064 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.3.1.93.HEAD.3-da1536544

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.506 seconds of real time
  6.419352 seconds of total run time (6.319799 user, 0.099553 system)
  [ Run times consist of 0.376 seconds GC time, and 6.044 seconds non-GC time. ]
  98.66% CPU
  24,670,447,020 processor cycles
  20,298,251,440 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  6.663 seconds of real time
  6.618794 seconds of total run time (6.488322 user, 0.130472 system)
  [ Run times consist of 0.406 seconds GC time, and 6.213 seconds non-GC time. ]
  99.34% CPU
  25,279,294,230 processor cycles
  24,343,646,448 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.610 seconds of real time
  7.573754 seconds of total run time (7.498056 user, 0.075698 system)
  [ Run times consist of 0.221 seconds GC time, and 7.353 seconds non-GC time. ]
  99.53% CPU
  28,857,199,734 processor cycles
  12,002,388,736 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.770 seconds of real time
  13.755608 seconds of total run time (13.752565 user, 0.003043 system)
  99.90% CPU
  52,226,583,716 processor cycles
  1,068,064 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.3.1.93.HEAD.3-da1536544

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.780 seconds of real time
  6.749850 seconds of total run time (6.262828 user, 0.487022 system)
  [ Run times consist of 1.412 seconds GC time, and 5.338 seconds non-GC time. ]
  99.56% CPU
  25,721,019,644 processor cycles
  12,663,249,200 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.580 seconds of real time
  7.538899 seconds of total run time (7.038144 user, 0.500755 system)
  [ Run times consist of 1.651 seconds GC time, and 5.888 seconds non-GC time. ]
  99.46% CPU
  28,757,475,460 processor cycles
  14,843,566,320 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.846 seconds of real time
  5.840846 seconds of total run time (5.700843 user, 0.140003 system)
  [ Run times consist of 0.420 seconds GC time, and 5.421 seconds non-GC time. ]
  99.91% CPU
  22,174,408,622 processor cycles
  2,520,017,776 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.786 seconds of real time
  4.779643 seconds of total run time (4.766517 user, 0.013126 system)
  99.87% CPU
  18,151,770,650 processor cycles
  78,440,896 bytes consed
#+end_example

* Benchmarks with pairing heap nodes as structs
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 2,776,104 microseconds (2.776104 seconds) to run.
       114,366 microseconds (0.114366 seconds, 4.12%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     2,858,273 microseconds (2.858273 seconds) were spent in user mode
        66,525 microseconds (0.066525 seconds) were spent in system mode
 3,096,088,800 bytes of memory allocated.
 451 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 3,343,017 microseconds (3.343017 seconds) to run.
       129,661 microseconds (0.129661 seconds, 3.88%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,427,226 microseconds (3.427226 seconds) were spent in user mode
        84,112 microseconds (0.084112 seconds) were spent in system mode
 3,531,162,400 bytes of memory allocated.
 451 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,575,586 microseconds (4.575586 seconds) to run.
       151,609 microseconds (0.151609 seconds, 3.31%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,157,535 microseconds (5.157535 seconds) were spent in user mode
        63,808 microseconds (0.063808 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 132 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,535,548 microseconds (6.535548 seconds) to run.
During that period, and with 16 available CPU cores,
     6,532,783 microseconds (6.532783 seconds) were spent in user mode
             0 microseconds (0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 43,001,339 microseconds (43.001340 seconds) to run.
        779,135 microseconds ( 0.779135 seconds, 1.81%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     43,632,579 microseconds (43.632580 seconds) were spent in user mode
        735,491 microseconds ( 0.735491 seconds) were spent in system mode
 28,405,573,600 bytes of memory allocated.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 48,242,192 microseconds (48.242190 seconds) to run.
        880,504 microseconds ( 0.880504 seconds, 1.83%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     48,911,321 microseconds (48.911320 seconds) were spent in user mode
        866,602 microseconds ( 0.866602 seconds) were spent in system mode
 32,453,860,800 bytes of memory allocated.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 52,846,472 microseconds (52.846474 seconds) to run.
      1,543,621 microseconds ( 1.543621 seconds, 2.92%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     57,767,643 microseconds (57.767643 seconds) were spent in user mode
        618,778 microseconds ( 0.618778 seconds) were spent in system mode
 12,002,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 83,277,462 microseconds (83.277466 seconds) to run.
During that period, and with 16 available CPU cores,
     83,252,182 microseconds (83.252180 seconds) were spent in user mode
              0 microseconds ( 0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664

SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 20,237,112 microseconds (20.237112 seconds) to run.
      5,168,918 microseconds ( 5.168918 seconds, 25.54%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     20,734,308 microseconds (20.734308 seconds) were spent in user mode
        443,423 microseconds ( 0.443423 seconds) were spent in system mode
 17,203,634,400 bytes of memory allocated.
 928 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 22,642,207 microseconds (22.642208 seconds) to run.
      5,395,607 microseconds ( 5.395607 seconds, 23.83%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,225,773 microseconds (23.225773 seconds) were spent in user mode
        472,751 microseconds ( 0.472751 seconds) were spent in system mode
 19,388,541,600 bytes of memory allocated.
 1,408 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 33,906,022 microseconds (33.906025 seconds) to run.
      2,363,777 microseconds ( 2.363777 seconds, 6.97%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     35,758,558 microseconds (35.758560 seconds) were spent in user mode
        105,533 microseconds ( 0.105533 seconds) were spent in system mode
 2,520,001,600 bytes of memory allocated.
 160 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 22,328,207 microseconds (22.328209 seconds) to run.
         16,996 microseconds ( 0.016996 seconds, 0.08%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     22,028,990 microseconds (22.028990 seconds) were spent in user mode
         63,968 microseconds ( 0.063968 seconds) were spent in system mode
 78,532,800 bytes of memory allocated.
#+end_example

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts (×50), on SBCL 2.4.6.50.HEAD.3-ad944aecc

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.713 seconds of real time
  0.709925 seconds of total run time (0.706154 user, 0.003771 system)
  [ Real times consist of 0.026 seconds GC time, and 0.687 seconds non-GC time. ]
  [ Run times consist of 0.033 seconds GC time, and 0.677 seconds non-GC time. ]
  99.58% CPU
  2,708,721,548 processor cycles
  2,225,739,520 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.843 seconds of real time
  0.844756 seconds of total run time (0.828306 user, 0.016450 system)
  [ Real times consist of 0.036 seconds GC time, and 0.807 seconds non-GC time. ]
  [ Run times consist of 0.041 seconds GC time, and 0.804 seconds non-GC time. ]
  100.24% CPU
  3,200,384,168 processor cycles
  2,661,554,816 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  1.010 seconds of real time
  1.010654 seconds of total run time (1.010593 user, 0.000061 system)
  [ Real times consist of 0.020 seconds GC time, and 0.990 seconds non-GC time. ]
  [ Run times consist of 0.018 seconds GC time, and 0.993 seconds non-GC time. ]
  100.10% CPU
  3,832,797,344 processor cycles
  1,202,394,352 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.273 seconds of real time
  1.274268 seconds of total run time (1.274227 user, 0.000041 system)
  100.08% CPU
  4,836,368,224 processor cycles
  1,068,016 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts (×50), on SBCL 2.4.6.50.HEAD.3-ad944aecc

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.550 seconds of real time
  6.549307 seconds of total run time (6.479484 user, 0.069823 system)
  [ Real times consist of 0.333 seconds GC time, and 6.217 seconds non-GC time. ]
  [ Run times consist of 0.336 seconds GC time, and 6.214 seconds non-GC time. ]
  99.98% CPU
  24,847,253,154 processor cycles
  20,297,253,680 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.726 seconds of real time
  7.696336 seconds of total run time (7.629795 user, 0.066541 system)
  [ Real times consist of 0.336 seconds GC time, and 7.390 seconds non-GC time. ]
  [ Run times consist of 0.369 seconds GC time, and 7.328 seconds non-GC time. ]
  99.61% CPU
  29,303,081,132 processor cycles
  24,345,778,160 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  9.566 seconds of real time
  9.554493 seconds of total run time (9.521023 user, 0.033470 system)
  [ Real times consist of 0.236 seconds GC time, and 9.330 seconds non-GC time. ]
  [ Run times consist of 0.201 seconds GC time, and 9.354 seconds non-GC time. ]
  99.87% CPU
  36,285,920,928 processor cycles
  12,002,388,736 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  12.906 seconds of real time
  12.901468 seconds of total run time (12.901440 user, 0.000028 system)
  99.96% CPU
  48,956,394,574 processor cycles
  1,068,016 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts (×50), on SBCL 2.4.6.50.HEAD.3-ad944aecc

SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.443 seconds of real time
  6.443982 seconds of total run time (6.027710 user, 0.416272 system)
  [ Real times consist of 1.320 seconds GC time, and 5.123 seconds non-GC time. ]
  [ Run times consist of 1.308 seconds GC time, and 5.136 seconds non-GC time. ]
  100.02% CPU
  24,445,845,132 processor cycles
  12,668,388,912 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.600 seconds of real time
  7.607486 seconds of total run time (7.174304 user, 0.433182 system)
  [ Real times consist of 1.610 seconds GC time, and 5.990 seconds non-GC time. ]
  [ Run times consist of 1.590 seconds GC time, and 6.018 seconds non-GC time. ]
  100.09% CPU
  28,833,924,772 processor cycles
  14,849,417,968 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  6.273 seconds of real time
  6.268726 seconds of total run time (6.148752 user, 0.119974 system)
  [ Real times consist of 0.416 seconds GC time, and 5.857 seconds non-GC time. ]
  [ Run times consist of 0.403 seconds GC time, and 5.866 seconds non-GC time. ]
  99.94% CPU
  23,802,017,592 processor cycles
  2,520,017,776 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.273 seconds of real time
  4.273516 seconds of total run time (4.260166 user, 0.013350 system)
  100.02% CPU
  16,216,080,366 processor cycles
  78,440,848 bytes consed
#+end_example
