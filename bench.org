#+title: Simple pairing heap benchmarks
#+options: num:nil toc:2 ^:nil

* [1/1] Tasks                                                      :noexport:
** DONE Benchmark against damn fast priority queue
CLOSED: [2021-12-07 Tue 14:14]

Randomly stumbled upon https://github.com/phoe/damn-fast-priority-queue, which
looks like a good candidate to include in the benchmarks.

* Benchmark code                                                   :noexport:

The following two code blocks must be evaluated before evaluating the
benchmark blocks (using ~C-c C-c~).

#+caption: Setup code
#+begin_src lisp :results silent
  (in-package #:cl-user)

  (eval-when (:load-toplevel :compile-toplevel :execute)
    (unless (find-package '#:simple-pairing-heap)
      (ql:quickload "simple-pairing-heap"))
    (unless (find-package '#:bodge-heap)
      (ql:quickload "bodge-heap"))
    (unless (find-package '#:damn-fast-priority-queue)
      (ql:quickload "damn-fast-priority-queue")))
#+end_src

#+caption: Benchmark code
#+begin_src lisp :results silent
  (in-package #:cl-user)

  (defun benchmark (&key (n 1000)
                         (m 1000)
                         (scale (expt n 2))
                         (repeat 50)
                         (warmup 10)
                         (key #'identity)
                         (node-constructor #'identity))
    (let ((init-items (loop repeat n
                            collect (funcall node-constructor (random scale))))
          (more-items (loop repeat m
                            collect (funcall node-constructor (random scale)))))
      (macrolet ((bench ((heap-var item-var description)
                         new add del)
                   `(progn
                      (fresh-line *trace-output*)
                      (write-line ,description *trace-output*)
                      ,#+sbcl (sb-ext:gc :full t)
                      (flet ((run ()
                               (let ((,heap-var ,new))
                                 (loop for ,item-var in init-items
                                       do ,add)
                                 (loop for ,item-var in more-items
                                       do ,del ,add))))
                        (loop repeat warmup do (run))
                        (time
                         (loop repeat repeat do (run)))))))
        (bench (heap item "SIMPLE-PAIRING-HEAP (recursive)")
               (simple-pairing-heap:create :key key :recursive-merge t)
               (simple-pairing-heap:insert item heap)
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "SIMPLE-PAIRING-HEAP (consing)")
               (simple-pairing-heap:create :key key)
               (simple-pairing-heap:insert item heap)
               (simple-pairing-heap:pop-front heap))
        (bench (heap item "BODGE-HEAP (pairing)")
               (bodge-heap:make-pairing-heap :key key)
               (bodge-heap:pairing-heap-push heap item)
               (bodge-heap:pairing-heap-pop heap))
        (bench (heap item "DAMN-FAST-PRIORITY-QUEUE")
               (damn-fast-priority-queue:make-queue)
               (damn-fast-priority-queue:enqueue heap item (funcall key item))
               (damn-fast-priority-queue:dequeue heap))
        t)))
#+end_src

#+caption: Sampling code
#+name: run-benchmark
#+begin_src lisp :var heap-size=1000 reinserts=1000
  (let ((output (with-output-to-string (*trace-output*)
                  (format *trace-output*
                          "~&Heap of size ~D, with ~D reinserts, ~A ~A~%"
                          heap-size reinserts
                          (lisp-implementation-type)
                          (lisp-implementation-version))
                  (benchmark :n heap-size
                             :m reinserts
                             :node-constructor (lambda (n)
                                                 (cons n (format nil "~R" n)))
                             :key #'car))))
    (string-right-trim '(#\space #\return #\newline) output))
#+end_src

* Benchmarks with pairing heap nodes as cons cells
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664
PAIRING-HEAP
(LOOP REPEAT REPEAT DO (RUN))
took 22,901,788 microseconds (22.901789 seconds) to run.
         58,992 microseconds ( 0.058992 seconds, 0.26%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     23,191,845 microseconds (23.191845 seconds) were spent in user mode
        137,124 microseconds ( 0.137124 seconds) were spent in system mode
 1,350,148,000 bytes of memory allocated.
 65 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP
(LOOP REPEAT REPEAT DO (RUN))
took 4,975,993 microseconds (4.975993 seconds) to run.
       161,004 microseconds (0.161004 seconds, 3.24%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,263,986 microseconds (5.263986 seconds) were spent in user mode
        29,249 microseconds (0.029249 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 129 minor page faults, 0 major page faults, 0 swaps.
#+end_example

Other benchmarks take even longer, so not even trying.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, SBCL 2.1.11.21.HEAD.3-476140422
SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  0.733 seconds of real time
  0.744132 seconds of total run time (0.740603 user, 0.003529 system)
  [ Run times consist of 0.010 seconds GC time, and 0.735 seconds non-GC time. ]
  101.50% CPU
  2,786,739,120 processor cycles
  1,350,560,512 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  0.800 seconds of real time
  0.816733 seconds of total run time (0.816399 user, 0.000334 system)
  [ Run times consist of 0.015 seconds GC time, and 0.802 seconds non-GC time. ]
  102.13% CPU
  3,038,741,554 processor cycles
  1,786,581,008 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  0.803 seconds of real time
  0.813558 seconds of total run time (0.813417 user, 0.000141 system)
  [ Run times consist of 0.008 seconds GC time, and 0.806 seconds non-GC time. ]
  101.37% CPU
  3,049,231,720 processor cycles
  1,202,400,720 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  1.326 seconds of real time
  1.326102 seconds of total run time (1.326102 user, 0.000000 system)
  100.00% CPU
  5,031,861,048 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts, SBCL 2.1.11.21.HEAD.3-476140422
SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.493 seconds of real time
  6.561409 seconds of total run time (6.557536 user, 0.003873 system)
  [ Run times consist of 0.108 seconds GC time, and 6.454 seconds non-GC time. ]
  101.05% CPU
  24,621,486,718 processor cycles
  12,202,089,616 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  6.950 seconds of real time
  7.085026 seconds of total run time (7.069500 user, 0.015526 system)
  [ Run times consist of 0.139 seconds GC time, and 6.947 seconds non-GC time. ]
  101.94% CPU
  26,368,204,864 processor cycles
  16,251,276,080 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  7.360 seconds of real time
  7.442746 seconds of total run time (7.421708 user, 0.021038 system)
  [ Run times consist of 0.106 seconds GC time, and 7.337 seconds non-GC time. ]
  101.13% CPU
  27,916,167,696 processor cycles
  12,002,403,376 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  13.386 seconds of real time
  13.380252 seconds of total run time (13.380252 user, 0.000000 system)
  99.96% CPU
  50,767,218,568 processor cycles
  1,082,448 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts, SBCL 2.1.11.21.HEAD.3-476140422
SIMPLE-PAIRING-HEAP (recursive)
Evaluation took:
  6.826 seconds of real time
  6.890385 seconds of total run time (6.829506 user, 0.060879 system)
  [ Run times consist of 0.299 seconds GC time, and 6.592 seconds non-GC time. ]
  100.94% CPU
  25,890,143,584 processor cycles
  8,186,986,832 bytes consed

SIMPLE-PAIRING-HEAP (consing)
Evaluation took:
  7.623 seconds of real time
  7.714912 seconds of total run time (7.563381 user, 0.151531 system)
  [ Run times consist of 0.442 seconds GC time, and 7.273 seconds non-GC time. ]
  101.21% CPU
  28,916,679,576 processor cycles
  10,372,657,696 bytes consed

BODGE-HEAP (pairing)
Evaluation took:
  5.433 seconds of real time
  5.453318 seconds of total run time (5.436884 user, 0.016434 system)
  [ Run times consist of 0.095 seconds GC time, and 5.359 seconds non-GC time. ]
  100.37% CPU
  20,603,109,990 processor cycles
  2,520,004,960 bytes consed

DAMN-FAST-PRIORITY-QUEUE
Evaluation took:
  4.600 seconds of real time
  4.598392 seconds of total run time (4.588744 user, 0.009648 system)
  99.96% CPU
  17,446,850,662 processor cycles
  78,506,448 bytes consed
#+end_example

* Benchmarks with pairing heap nodes as structs
** CCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664
SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 3,066,349 microseconds (3.066349 seconds) to run.
        84,572 microseconds (0.084572 seconds, 2.76%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,124,473 microseconds (3.124473 seconds) were spent in user mode
        50,126 microseconds (0.050126 seconds) were spent in system mode
 2,225,620,800 bytes of memory allocated.
 129 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 3,910,721 microseconds (3.910721 seconds) to run.
        98,462 microseconds (0.098462 seconds, 2.52%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     3,995,980 microseconds (3.995980 seconds) were spent in user mode
        43,896 microseconds (0.043896 seconds) were spent in system mode
 2,662,268,000 bytes of memory allocated.
 193 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 4,988,852 microseconds (4.988852 seconds) to run.
       164,986 microseconds (0.164986 seconds, 3.31%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     5,319,950 microseconds (5.319950 seconds) were spent in user mode
        49,012 microseconds (0.049012 seconds) were spent in system mode
 1,202,401,600 bytes of memory allocated.
 129 minor page faults, 0 major page faults, 0 swaps.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 6,756,809 microseconds (6.756809 seconds) to run.
           575 microseconds (0.000575 seconds, 0.01%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     6,755,681 microseconds (6.755681 seconds) were spent in user mode
             0 microseconds (0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts, Clozure Common Lisp Version 1.12 (v1.12-33-gc94c3a88) LinuxX8664
SIMPLE-PAIRING-HEAP (recursive)
(LOOP REPEAT REPEAT DO (RUN))
took 29,464,468 microseconds (29.464468 seconds) to run.
        605,413 microseconds ( 0.605413 seconds, 2.05%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     29,901,286 microseconds (29.901285 seconds) were spent in user mode
        553,241 microseconds ( 0.553241 seconds) were spent in system mode
 20,306,474,400 bytes of memory allocated.
 548 minor page faults, 0 major page faults, 0 swaps.
SIMPLE-PAIRING-HEAP (consing)
(LOOP REPEAT REPEAT DO (RUN))
took 36,813,683 microseconds (36.813683 seconds) to run.
        733,736 microseconds ( 0.733736 seconds, 1.99%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     37,318,770 microseconds (37.318770 seconds) were spent in user mode
        541,130 microseconds ( 0.541130 seconds) were spent in system mode
 24,357,396,800 bytes of memory allocated.
 291 minor page faults, 0 major page faults, 0 swaps.
BODGE-HEAP (pairing)
(LOOP REPEAT REPEAT DO (RUN))
took 46,031,466 microseconds (46.031464 seconds) to run.
      1,669,515 microseconds ( 1.669515 seconds, 3.63%) of which was spent in GC.
During that period, and with 16 available CPU cores,
     49,882,097 microseconds (49.882095 seconds) were spent in user mode
        597,017 microseconds ( 0.597017 seconds) were spent in system mode
 12,002,401,600 bytes of memory allocated.
DAMN-FAST-PRIORITY-QUEUE
(LOOP REPEAT REPEAT DO (RUN))
took 69,538,277 microseconds (69.538280 seconds) to run.
During that period, and with 16 available CPU cores,
     69,517,977 microseconds (69.517975 seconds) were spent in user mode
              0 microseconds ( 0.000000 seconds) were spent in system mode
 1,089,600 bytes of memory allocated.
 2 minor page faults, 0 major page faults, 0 swaps.
#+end_example

The last benchmark (size ~50000~, ~1000000~ reinserts) takes too long (and
eats memory like crazy), so not included.

** SBCL

#+call: run-benchmark(1000, 500000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 500000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  0.993 seconds of real time
  0.998669 seconds of total run time (0.998658 user, 0.000011 system)
  [ Run times consist of 0.021 seconds GC time, and 0.978 seconds non-GC time. ]
  100.60% CPU
  3,766,689,124 processor cycles
  2,226,190,768 bytes consed

BODGE-HEAP
Evaluation took:
  0.806 seconds of real time
  0.809088 seconds of total run time (0.809088 user, 0.000000 system)
  [ Run times consist of 0.010 seconds GC time, and 0.800 seconds non-GC time. ]
  100.37% CPU
  3,062,393,780 processor cycles
  1,202,399,904 bytes consed
#+end_example

#+call: run-benchmark(1000, 5000000)

#+RESULTS:
#+begin_example
Heap of size 1000, with 5000000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  8.750 seconds of real time
  8.831415 seconds of total run time (8.821180 user, 0.010235 system)
  [ Run times consist of 0.193 seconds GC time, and 8.639 seconds non-GC time. ]
  100.93% CPU
  33,181,606,764 processor cycles
  20,302,848,720 bytes consed

BODGE-HEAP
Evaluation took:
  7.316 seconds of real time
  7.405160 seconds of total run time (7.367972 user, 0.037188 system)
  [ Run times consist of 0.111 seconds GC time, and 7.295 seconds non-GC time. ]
  101.22% CPU
  27,741,303,856 processor cycles
  12,002,376,352 bytes consed
#+end_example

#+call: run-benchmark(50000, 1000000)

#+RESULTS:
#+begin_example
Heap of size 50000, with 1000000 reinserts, SBCL 2.1.10.73.HEAD.3-64dae8610
PAIRING-HEAP
Evaluation took:
  8.593 seconds of real time
  8.689080 seconds of total run time (8.530174 user, 0.158906 system)
  [ Run times consist of 0.656 seconds GC time, and 8.034 seconds non-GC time. ]
  101.12% CPU
  32,598,229,320 processor cycles
  12,663,746,272 bytes consed

BODGE-HEAP
Evaluation took:
  5.380 seconds of real time
  5.397033 seconds of total run time (5.387871 user, 0.009162 system)
  [ Run times consist of 0.090 seconds GC time, and 5.308 seconds non-GC time. ]
  100.32% CPU
  20,407,363,668 processor cycles
  2,519,980,288 bytes consed
#+end_example
